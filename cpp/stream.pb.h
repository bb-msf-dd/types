// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

#ifndef PROTOBUF_INCLUDED_stream_2eproto
#define PROTOBUF_INCLUDED_stream_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metadata.pb.h"
#include "source.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_stream_2eproto 

namespace protobuf_stream_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_stream_2eproto
namespace pb {
class Stream;
class StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::Stream* Arena::CreateMaybeMessage<::pb::Stream>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

enum Stream_Version {
  Stream_Version_UNKNOWN_VERSION = 0,
  Stream_Version__0_0_1 = 1
};
bool Stream_Version_IsValid(int value);
const Stream_Version Stream_Version_Version_MIN = Stream_Version_UNKNOWN_VERSION;
const Stream_Version Stream_Version_Version_MAX = Stream_Version__0_0_1;
const int Stream_Version_Version_ARRAYSIZE = Stream_Version_Version_MAX + 1;

const ::google::protobuf::EnumDescriptor* Stream_Version_descriptor();
inline const ::std::string& Stream_Version_Name(Stream_Version value) {
  return ::google::protobuf::internal::NameOfEnum(
    Stream_Version_descriptor(), value);
}
inline bool Stream_Version_Parse(
    const ::std::string& name, Stream_Version* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Stream_Version>(
    Stream_Version_descriptor(), name, value);
}
// ===================================================================

class Stream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Stream) */ {
 public:
  Stream();
  virtual ~Stream();

  Stream(const Stream& from);

  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stream(Stream&& from) noexcept
    : Stream() {
    *this = ::std::move(from);
  }

  inline Stream& operator=(Stream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stream* internal_default_instance() {
    return reinterpret_cast<const Stream*>(
               &_Stream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Stream* other);
  friend void swap(Stream& a, Stream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stream* New() const final {
    return CreateMaybeMessage<Stream>(NULL);
  }

  Stream* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Stream>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Stream& from);
  void MergeFrom(const Stream& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Stream_Version Version;
  static const Version UNKNOWN_VERSION =
    Stream_Version_UNKNOWN_VERSION;
  static const Version _0_0_1 =
    Stream_Version__0_0_1;
  static inline bool Version_IsValid(int value) {
    return Stream_Version_IsValid(value);
  }
  static const Version Version_MIN =
    Stream_Version_Version_MIN;
  static const Version Version_MAX =
    Stream_Version_Version_MAX;
  static const int Version_ARRAYSIZE =
    Stream_Version_Version_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Version_descriptor() {
    return Stream_Version_descriptor();
  }
  static inline const ::std::string& Version_Name(Version value) {
    return Stream_Version_Name(value);
  }
  static inline bool Version_Parse(const ::std::string& name,
      Version* value) {
    return Stream_Version_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .pb.Metadata metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  private:
  const ::pb::Metadata& _internal_metadata() const;
  public:
  const ::pb::Metadata& metadata() const;
  ::pb::Metadata* release_metadata();
  ::pb::Metadata* mutable_metadata();
  void set_allocated_metadata(::pb::Metadata* metadata);

  // required .pb.Source source = 3;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  private:
  const ::pb::Source& _internal_source() const;
  public:
  const ::pb::Source& source() const;
  ::pb::Source* release_source();
  ::pb::Source* mutable_source();
  void set_allocated_source(::pb::Source* source);

  // required .pb.Stream.Version version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::pb::Stream_Version version() const;
  void set_version(::pb::Stream_Version value);

  // @@protoc_insertion_point(class_scope:pb.Stream)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_metadata();
  void clear_has_metadata();
  void set_has_source();
  void clear_has_source();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::pb::Metadata* metadata_;
  ::pb::Source* source_;
  int version_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stream

// required .pb.Stream.Version version = 1;
inline bool Stream::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stream::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stream::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stream::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::pb::Stream_Version Stream::version() const {
  // @@protoc_insertion_point(field_get:pb.Stream.version)
  return static_cast< ::pb::Stream_Version >(version_);
}
inline void Stream::set_version(::pb::Stream_Version value) {
  assert(::pb::Stream_Version_IsValid(value));
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.Stream.version)
}

// required .pb.Metadata metadata = 2;
inline bool Stream::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stream::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stream::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pb::Metadata& Stream::_internal_metadata() const {
  return *metadata_;
}
inline const ::pb::Metadata& Stream::metadata() const {
  const ::pb::Metadata* p = metadata_;
  // @@protoc_insertion_point(field_get:pb.Stream.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Metadata*>(
      &::pb::_Metadata_default_instance_);
}
inline ::pb::Metadata* Stream::release_metadata() {
  // @@protoc_insertion_point(field_release:pb.Stream.metadata)
  clear_has_metadata();
  ::pb::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline ::pb::Metadata* Stream::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::Metadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.Stream.metadata)
  return metadata_;
}
inline void Stream::set_allocated_metadata(::pb::Metadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:pb.Stream.metadata)
}

// required .pb.Source source = 3;
inline bool Stream::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stream::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stream::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pb::Source& Stream::_internal_source() const {
  return *source_;
}
inline const ::pb::Source& Stream::source() const {
  const ::pb::Source* p = source_;
  // @@protoc_insertion_point(field_get:pb.Stream.source)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Source*>(
      &::pb::_Source_default_instance_);
}
inline ::pb::Source* Stream::release_source() {
  // @@protoc_insertion_point(field_release:pb.Stream.source)
  clear_has_source();
  ::pb::Source* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::pb::Source* Stream::mutable_source() {
  set_has_source();
  if (source_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.Stream.source)
  return source_;
}
inline void Stream::set_allocated_source(::pb::Source* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_);
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    set_has_source();
  } else {
    clear_has_source();
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:pb.Stream.source)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::Stream_Version> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Stream_Version>() {
  return ::pb::Stream_Version_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_stream_2eproto
