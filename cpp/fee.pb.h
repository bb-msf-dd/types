// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fee.proto

#ifndef PROTOBUF_INCLUDED_fee_2eproto
#define PROTOBUF_INCLUDED_fee_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_fee_2eproto 

namespace protobuf_fee_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_fee_2eproto
namespace pb {
class Fee;
class FeeDefaultTypeInternal;
extern FeeDefaultTypeInternal _Fee_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::Fee* Arena::CreateMaybeMessage<::pb::Fee>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

enum Fee_Version {
  Fee_Version_UNKNOWN_VERSION = 0,
  Fee_Version__0_0_1 = 1
};
bool Fee_Version_IsValid(int value);
const Fee_Version Fee_Version_Version_MIN = Fee_Version_UNKNOWN_VERSION;
const Fee_Version Fee_Version_Version_MAX = Fee_Version__0_0_1;
const int Fee_Version_Version_ARRAYSIZE = Fee_Version_Version_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fee_Version_descriptor();
inline const ::std::string& Fee_Version_Name(Fee_Version value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fee_Version_descriptor(), value);
}
inline bool Fee_Version_Parse(
    const ::std::string& name, Fee_Version* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fee_Version>(
    Fee_Version_descriptor(), name, value);
}
enum Fee_Currency {
  Fee_Currency_UNKNOWN_CURRENCY = 0,
  Fee_Currency_LBC = 1,
  Fee_Currency_BTC = 2,
  Fee_Currency_USD = 3
};
bool Fee_Currency_IsValid(int value);
const Fee_Currency Fee_Currency_Currency_MIN = Fee_Currency_UNKNOWN_CURRENCY;
const Fee_Currency Fee_Currency_Currency_MAX = Fee_Currency_USD;
const int Fee_Currency_Currency_ARRAYSIZE = Fee_Currency_Currency_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fee_Currency_descriptor();
inline const ::std::string& Fee_Currency_Name(Fee_Currency value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fee_Currency_descriptor(), value);
}
inline bool Fee_Currency_Parse(
    const ::std::string& name, Fee_Currency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fee_Currency>(
    Fee_Currency_descriptor(), name, value);
}
// ===================================================================

class Fee : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Fee) */ {
 public:
  Fee();
  virtual ~Fee();

  Fee(const Fee& from);

  inline Fee& operator=(const Fee& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Fee(Fee&& from) noexcept
    : Fee() {
    *this = ::std::move(from);
  }

  inline Fee& operator=(Fee&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fee* internal_default_instance() {
    return reinterpret_cast<const Fee*>(
               &_Fee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Fee* other);
  friend void swap(Fee& a, Fee& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Fee* New() const final {
    return CreateMaybeMessage<Fee>(NULL);
  }

  Fee* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Fee>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Fee& from);
  void MergeFrom(const Fee& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fee* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Fee_Version Version;
  static const Version UNKNOWN_VERSION =
    Fee_Version_UNKNOWN_VERSION;
  static const Version _0_0_1 =
    Fee_Version__0_0_1;
  static inline bool Version_IsValid(int value) {
    return Fee_Version_IsValid(value);
  }
  static const Version Version_MIN =
    Fee_Version_Version_MIN;
  static const Version Version_MAX =
    Fee_Version_Version_MAX;
  static const int Version_ARRAYSIZE =
    Fee_Version_Version_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Version_descriptor() {
    return Fee_Version_descriptor();
  }
  static inline const ::std::string& Version_Name(Version value) {
    return Fee_Version_Name(value);
  }
  static inline bool Version_Parse(const ::std::string& name,
      Version* value) {
    return Fee_Version_Parse(name, value);
  }

  typedef Fee_Currency Currency;
  static const Currency UNKNOWN_CURRENCY =
    Fee_Currency_UNKNOWN_CURRENCY;
  static const Currency LBC =
    Fee_Currency_LBC;
  static const Currency BTC =
    Fee_Currency_BTC;
  static const Currency USD =
    Fee_Currency_USD;
  static inline bool Currency_IsValid(int value) {
    return Fee_Currency_IsValid(value);
  }
  static const Currency Currency_MIN =
    Fee_Currency_Currency_MIN;
  static const Currency Currency_MAX =
    Fee_Currency_Currency_MAX;
  static const int Currency_ARRAYSIZE =
    Fee_Currency_Currency_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Currency_descriptor() {
    return Fee_Currency_descriptor();
  }
  static inline const ::std::string& Currency_Name(Currency value) {
    return Fee_Currency_Name(value);
  }
  static inline bool Currency_Parse(const ::std::string& name,
      Currency* value) {
    return Fee_Currency_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes address = 3;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // required .pb.Fee.Version version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::pb::Fee_Version version() const;
  void set_version(::pb::Fee_Version value);

  // required .pb.Fee.Currency currency = 2;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 2;
  ::pb::Fee_Currency currency() const;
  void set_currency(::pb::Fee_Currency value);

  // required float amount = 4;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  float amount() const;
  void set_amount(float value);

  // @@protoc_insertion_point(class_scope:pb.Fee)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_currency();
  void clear_has_currency();
  void set_has_address();
  void clear_has_address();
  void set_has_amount();
  void clear_has_amount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  int version_;
  int currency_;
  float amount_;
  friend struct ::protobuf_fee_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Fee

// required .pb.Fee.Version version = 1;
inline bool Fee::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fee::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fee::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fee::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::pb::Fee_Version Fee::version() const {
  // @@protoc_insertion_point(field_get:pb.Fee.version)
  return static_cast< ::pb::Fee_Version >(version_);
}
inline void Fee::set_version(::pb::Fee_Version value) {
  assert(::pb::Fee_Version_IsValid(value));
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.Fee.version)
}

// required .pb.Fee.Currency currency = 2;
inline bool Fee::has_currency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fee::set_has_currency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fee::clear_has_currency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fee::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
inline ::pb::Fee_Currency Fee::currency() const {
  // @@protoc_insertion_point(field_get:pb.Fee.currency)
  return static_cast< ::pb::Fee_Currency >(currency_);
}
inline void Fee::set_currency(::pb::Fee_Currency value) {
  assert(::pb::Fee_Currency_IsValid(value));
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:pb.Fee.currency)
}

// required bytes address = 3;
inline bool Fee::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fee::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fee::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fee::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Fee::address() const {
  // @@protoc_insertion_point(field_get:pb.Fee.address)
  return address_.GetNoArena();
}
inline void Fee::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Fee.address)
}
#if LANG_CXX11
inline void Fee::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Fee.address)
}
#endif
inline void Fee::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Fee.address)
}
inline void Fee::set_address(const void* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Fee.address)
}
inline ::std::string* Fee::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:pb.Fee.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fee::release_address() {
  // @@protoc_insertion_point(field_release:pb.Fee.address)
  if (!has_address()) {
    return NULL;
  }
  clear_has_address();
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fee::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:pb.Fee.address)
}

// required float amount = 4;
inline bool Fee::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fee::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fee::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fee::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline float Fee::amount() const {
  // @@protoc_insertion_point(field_get:pb.Fee.amount)
  return amount_;
}
inline void Fee::set_amount(float value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:pb.Fee.amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::Fee_Version> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Fee_Version>() {
  return ::pb::Fee_Version_descriptor();
}
template <> struct is_proto_enum< ::pb::Fee_Currency> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Fee_Currency>() {
  return ::pb::Fee_Currency_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_fee_2eproto
