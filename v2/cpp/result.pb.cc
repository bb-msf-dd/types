// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result.proto

#include "result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_result_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Error_result_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_result_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClaimMeta_result_2eproto;
namespace pb {
class OutputsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Outputs> _instance;
} _Outputs_default_instance_;
class OutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Output> _instance;
  const ::pb::ClaimMeta* claim_;
  const ::pb::Error* error_;
} _Output_default_instance_;
class ClaimMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClaimMeta> _instance;
} _ClaimMeta_default_instance_;
class ErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Error> _instance;
} _Error_default_instance_;
}  // namespace pb
static void InitDefaultsOutputs_result_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Outputs_default_instance_;
    new (ptr) ::pb::Outputs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Outputs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Outputs_result_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOutputs_result_2eproto}, {
      &scc_info_ClaimMeta_result_2eproto.base,}};

static void InitDefaultsClaimMeta_result_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Output_default_instance_;
    new (ptr) ::pb::Output();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::pb::_ClaimMeta_default_instance_;
    new (ptr) ::pb::ClaimMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Output::InitAsDefaultInstance();
  ::pb::ClaimMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClaimMeta_result_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClaimMeta_result_2eproto}, {
      &scc_info_Error_result_2eproto.base,}};

static void InitDefaultsError_result_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Error_default_instance_;
    new (ptr) ::pb::Error();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Error::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Error_result_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsError_result_2eproto}, {}};

void InitDefaults_result_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Outputs_result_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClaimMeta_result_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Error_result_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_result_2eproto[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_result_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_result_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_result_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Outputs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Outputs, txos_),
  PROTOBUF_FIELD_OFFSET(::pb::Outputs, extra_txos_),
  PROTOBUF_FIELD_OFFSET(::pb::Outputs, total_),
  PROTOBUF_FIELD_OFFSET(::pb::Outputs, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Output, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::Output, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Output, tx_hash_),
  PROTOBUF_FIELD_OFFSET(::pb::Output, nout_),
  PROTOBUF_FIELD_OFFSET(::pb::Output, height_),
  offsetof(::pb::OutputDefaultTypeInternal, claim_),
  offsetof(::pb::OutputDefaultTypeInternal, error_),
  PROTOBUF_FIELD_OFFSET(::pb::Output, meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, channel_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, repost_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, short_url_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, canonical_url_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, is_controlling_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, take_over_height_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, creation_height_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, activation_height_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, expiration_height_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, claims_in_channel_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, reposted_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, effective_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, support_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, trending_group_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, trending_mixed_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, trending_local_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimMeta, trending_global_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Error, code_),
  PROTOBUF_FIELD_OFFSET(::pb::Error, text_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::Outputs)},
  { 9, -1, sizeof(::pb::Output)},
  { 20, -1, sizeof(::pb::ClaimMeta)},
  { 42, -1, sizeof(::pb::Error)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Outputs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Output_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_ClaimMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Error_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_result_2eproto = {
  {}, AddDescriptors_result_2eproto, "result.proto", schemas,
  file_default_instances, TableStruct_result_2eproto::offsets,
  file_level_metadata_result_2eproto, 4, file_level_enum_descriptors_result_2eproto, file_level_service_descriptors_result_2eproto,
};

const char descriptor_table_protodef_result_2eproto[] =
  "\n\014result.proto\022\002pb\"b\n\007Outputs\022\030\n\004txos\030\001 "
  "\003(\0132\n.pb.Output\022\036\n\nextra_txos\030\002 \003(\0132\n.pb"
  ".Output\022\r\n\005total\030\003 \001(\r\022\016\n\006offset\030\004 \001(\r\"{"
  "\n\006Output\022\017\n\007tx_hash\030\001 \001(\014\022\014\n\004nout\030\002 \001(\r\022"
  "\016\n\006height\030\003 \001(\r\022\036\n\005claim\030\007 \001(\0132\r.pb.Clai"
  "mMetaH\000\022\032\n\005error\030\017 \001(\0132\t.pb.ErrorH\000B\006\n\004m"
  "eta\"\257\003\n\tClaimMeta\022\033\n\007channel\030\001 \001(\0132\n.pb."
  "Output\022\032\n\006repost\030\002 \001(\0132\n.pb.Output\022\021\n\tsh"
  "ort_url\030\003 \001(\t\022\025\n\rcanonical_url\030\004 \001(\t\022\026\n\016"
  "is_controlling\030\005 \001(\010\022\030\n\020take_over_height"
  "\030\006 \001(\r\022\027\n\017creation_height\030\007 \001(\r\022\031\n\021activ"
  "ation_height\030\010 \001(\r\022\031\n\021expiration_height\030"
  "\t \001(\r\022\031\n\021claims_in_channel\030\n \001(\r\022\020\n\010repo"
  "sted\030\013 \001(\r\022\030\n\020effective_amount\030\024 \001(\004\022\026\n\016"
  "support_amount\030\025 \001(\004\022\026\n\016trending_group\030\026"
  " \001(\r\022\026\n\016trending_mixed\030\027 \001(\002\022\026\n\016trending"
  "_local\030\030 \001(\002\022\027\n\017trending_global\030\031 \001(\002\"i\n"
  "\005Error\022\034\n\004code\030\001 \001(\0162\016.pb.Error.Code\022\014\n\004"
  "text\030\002 \001(\t\"4\n\004Code\022\020\n\014UNKNOWN_CODE\020\000\022\r\n\t"
  "NOT_FOUND\020\001\022\013\n\007INVALID\020\002b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_result_2eproto = {
  false, InitDefaults_result_2eproto, 
  descriptor_table_protodef_result_2eproto,
  "result.proto", &assign_descriptors_table_result_2eproto, 792,
};

void AddDescriptors_result_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_result_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_result_2eproto = []() { AddDescriptors_result_2eproto(); return true; }();
namespace pb {
const ::google::protobuf::EnumDescriptor* Error_Code_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_result_2eproto);
  return file_level_enum_descriptors_result_2eproto[0];
}
bool Error_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Error_Code Error::UNKNOWN_CODE;
const Error_Code Error::NOT_FOUND;
const Error_Code Error::INVALID;
const Error_Code Error::Code_MIN;
const Error_Code Error::Code_MAX;
const int Error::Code_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Outputs::InitAsDefaultInstance() {
}
class Outputs::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Outputs::kTxosFieldNumber;
const int Outputs::kExtraTxosFieldNumber;
const int Outputs::kTotalFieldNumber;
const int Outputs::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Outputs::Outputs()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Outputs)
}
Outputs::Outputs(const Outputs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      txos_(from.txos_),
      extra_txos_(from.extra_txos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&total_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:pb.Outputs)
}

void Outputs::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Outputs_result_2eproto.base);
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&total_)) + sizeof(offset_));
}

Outputs::~Outputs() {
  // @@protoc_insertion_point(destructor:pb.Outputs)
  SharedDtor();
}

void Outputs::SharedDtor() {
}

void Outputs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Outputs& Outputs::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Outputs_result_2eproto.base);
  return *internal_default_instance();
}


void Outputs::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Outputs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txos_.Clear();
  extra_txos_.Clear();
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&total_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Outputs::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Outputs*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pb.Output txos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::Output::_InternalParse;
          object = msg->add_txos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .pb.Output extra_txos = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::Output::_InternalParse;
          object = msg->add_extra_txos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // uint32 total = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_total(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 offset = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Outputs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Outputs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Output txos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_txos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.Output extra_txos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extra_txos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Outputs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Outputs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Outputs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Outputs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Output txos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->txos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->txos(static_cast<int>(i)),
      output);
  }

  // repeated .pb.Output extra_txos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_txos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->extra_txos(static_cast<int>(i)),
      output);
  }

  // uint32 total = 3;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total(), output);
  }

  // uint32 offset = 4;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Outputs)
}

::google::protobuf::uint8* Outputs::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Outputs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Output txos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->txos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->txos(static_cast<int>(i)), target);
  }

  // repeated .pb.Output extra_txos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_txos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->extra_txos(static_cast<int>(i)), target);
  }

  // uint32 total = 3;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total(), target);
  }

  // uint32 offset = 4;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Outputs)
  return target;
}

size_t Outputs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Outputs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Output txos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->txos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->txos(static_cast<int>(i)));
    }
  }

  // repeated .pb.Output extra_txos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->extra_txos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extra_txos(static_cast<int>(i)));
    }
  }

  // uint32 total = 3;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total());
  }

  // uint32 offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Outputs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Outputs)
  GOOGLE_DCHECK_NE(&from, this);
  const Outputs* source =
      ::google::protobuf::DynamicCastToGenerated<Outputs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Outputs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Outputs)
    MergeFrom(*source);
  }
}

void Outputs::MergeFrom(const Outputs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Outputs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  txos_.MergeFrom(from.txos_);
  extra_txos_.MergeFrom(from.extra_txos_);
  if (from.total() != 0) {
    set_total(from.total());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void Outputs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Outputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Outputs::CopyFrom(const Outputs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Outputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Outputs::IsInitialized() const {
  return true;
}

void Outputs::Swap(Outputs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Outputs::InternalSwap(Outputs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&txos_)->InternalSwap(CastToBase(&other->txos_));
  CastToBase(&extra_txos_)->InternalSwap(CastToBase(&other->extra_txos_));
  swap(total_, other->total_);
  swap(offset_, other->offset_);
}

::google::protobuf::Metadata Outputs::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_result_2eproto);
  return ::file_level_metadata_result_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Output::InitAsDefaultInstance() {
  ::pb::_Output_default_instance_.claim_ = const_cast< ::pb::ClaimMeta*>(
      ::pb::ClaimMeta::internal_default_instance());
  ::pb::_Output_default_instance_.error_ = const_cast< ::pb::Error*>(
      ::pb::Error::internal_default_instance());
}
class Output::HasBitSetters {
 public:
  static const ::pb::ClaimMeta& claim(const Output* msg);
  static const ::pb::Error& error(const Output* msg);
};

const ::pb::ClaimMeta&
Output::HasBitSetters::claim(const Output* msg) {
  return *msg->meta_.claim_;
}
const ::pb::Error&
Output::HasBitSetters::error(const Output* msg) {
  return *msg->meta_.error_;
}
void Output::set_allocated_claim(::pb::ClaimMeta* claim) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_meta();
  if (claim) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      claim = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, claim, submessage_arena);
    }
    set_has_claim();
    meta_.claim_ = claim;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Output.claim)
}
void Output::set_allocated_error(::pb::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_meta();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    meta_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Output.error)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Output::kTxHashFieldNumber;
const int Output::kNoutFieldNumber;
const int Output::kHeightFieldNumber;
const int Output::kClaimFieldNumber;
const int Output::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Output::Output()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Output)
}
Output::Output(const Output& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tx_hash().size() > 0) {
    tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  ::memcpy(&nout_, &from.nout_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&nout_)) + sizeof(height_));
  clear_has_meta();
  switch (from.meta_case()) {
    case kClaim: {
      mutable_claim()->::pb::ClaimMeta::MergeFrom(from.claim());
      break;
    }
    case kError: {
      mutable_error()->::pb::Error::MergeFrom(from.error());
      break;
    }
    case META_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.Output)
}

void Output::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ClaimMeta_result_2eproto.base);
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&nout_)) + sizeof(height_));
  clear_has_meta();
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:pb.Output)
  SharedDtor();
}

void Output::SharedDtor() {
  tx_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_meta()) {
    clear_meta();
  }
}

void Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Output& Output::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ClaimMeta_result_2eproto.base);
  return *internal_default_instance();
}


void Output::clear_meta() {
// @@protoc_insertion_point(one_of_clear_start:pb.Output)
  switch (meta_case()) {
    case kClaim: {
      delete meta_.claim_;
      break;
    }
    case kError: {
      delete meta_.error_;
      break;
    }
    case META_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = META_NOT_SET;
}


void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&nout_)) + sizeof(height_));
  clear_meta();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Output::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Output*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes tx_hash = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_tx_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 nout = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_nout(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 height = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.ClaimMeta claim = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::ClaimMeta::_InternalParse;
        object = msg->mutable_claim();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.Error error = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Error::_InternalParse;
        object = msg->mutable_error();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Output)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes tx_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ClaimMeta claim = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_claim()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Error error = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Output)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tx_hash(), output);
  }

  // uint32 nout = 2;
  if (this->nout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nout(), output);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // .pb.ClaimMeta claim = 7;
  if (has_claim()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::claim(this), output);
  }

  // .pb.Error error = 15;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::error(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Output)
}

::google::protobuf::uint8* Output::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tx_hash(), target);
  }

  // uint32 nout = 2;
  if (this->nout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nout(), target);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // .pb.ClaimMeta claim = 7;
  if (has_claim()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::claim(this), target);
  }

  // .pb.Error error = 15;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::error(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Output)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tx_hash());
  }

  // uint32 nout = 2;
  if (this->nout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nout());
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  switch (meta_case()) {
    // .pb.ClaimMeta claim = 7;
    case kClaim: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *meta_.claim_);
      break;
    }
    // .pb.Error error = 15;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *meta_.error_);
      break;
    }
    case META_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Output::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Output)
  GOOGLE_DCHECK_NE(&from, this);
  const Output* source =
      ::google::protobuf::DynamicCastToGenerated<Output>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Output)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Output)
    MergeFrom(*source);
  }
}

void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_hash().size() > 0) {

    tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  if (from.nout() != 0) {
    set_nout(from.nout());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  switch (from.meta_case()) {
    case kClaim: {
      mutable_claim()->::pb::ClaimMeta::MergeFrom(from.claim());
      break;
    }
    case kError: {
      mutable_error()->::pb::Error::MergeFrom(from.error());
      break;
    }
    case META_NOT_SET: {
      break;
    }
  }
}

void Output::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  return true;
}

void Output::Swap(Output* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Output::InternalSwap(Output* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tx_hash_.Swap(&other->tx_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nout_, other->nout_);
  swap(height_, other->height_);
  swap(meta_, other->meta_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Output::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_result_2eproto);
  return ::file_level_metadata_result_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ClaimMeta::InitAsDefaultInstance() {
  ::pb::_ClaimMeta_default_instance_._instance.get_mutable()->channel_ = const_cast< ::pb::Output*>(
      ::pb::Output::internal_default_instance());
  ::pb::_ClaimMeta_default_instance_._instance.get_mutable()->repost_ = const_cast< ::pb::Output*>(
      ::pb::Output::internal_default_instance());
}
class ClaimMeta::HasBitSetters {
 public:
  static const ::pb::Output& channel(const ClaimMeta* msg);
  static const ::pb::Output& repost(const ClaimMeta* msg);
};

const ::pb::Output&
ClaimMeta::HasBitSetters::channel(const ClaimMeta* msg) {
  return *msg->channel_;
}
const ::pb::Output&
ClaimMeta::HasBitSetters::repost(const ClaimMeta* msg) {
  return *msg->repost_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClaimMeta::kChannelFieldNumber;
const int ClaimMeta::kRepostFieldNumber;
const int ClaimMeta::kShortUrlFieldNumber;
const int ClaimMeta::kCanonicalUrlFieldNumber;
const int ClaimMeta::kIsControllingFieldNumber;
const int ClaimMeta::kTakeOverHeightFieldNumber;
const int ClaimMeta::kCreationHeightFieldNumber;
const int ClaimMeta::kActivationHeightFieldNumber;
const int ClaimMeta::kExpirationHeightFieldNumber;
const int ClaimMeta::kClaimsInChannelFieldNumber;
const int ClaimMeta::kRepostedFieldNumber;
const int ClaimMeta::kEffectiveAmountFieldNumber;
const int ClaimMeta::kSupportAmountFieldNumber;
const int ClaimMeta::kTrendingGroupFieldNumber;
const int ClaimMeta::kTrendingMixedFieldNumber;
const int ClaimMeta::kTrendingLocalFieldNumber;
const int ClaimMeta::kTrendingGlobalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClaimMeta::ClaimMeta()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ClaimMeta)
}
ClaimMeta::ClaimMeta(const ClaimMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  short_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.short_url().size() > 0) {
    short_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_url_);
  }
  canonical_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.canonical_url().size() > 0) {
    canonical_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_url_);
  }
  if (from.has_channel()) {
    channel_ = new ::pb::Output(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  if (from.has_repost()) {
    repost_ = new ::pb::Output(*from.repost_);
  } else {
    repost_ = nullptr;
  }
  ::memcpy(&is_controlling_, &from.is_controlling_,
    static_cast<size_t>(reinterpret_cast<char*>(&trending_local_) -
    reinterpret_cast<char*>(&is_controlling_)) + sizeof(trending_local_));
  // @@protoc_insertion_point(copy_constructor:pb.ClaimMeta)
}

void ClaimMeta::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ClaimMeta_result_2eproto.base);
  short_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trending_local_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(trending_local_));
}

ClaimMeta::~ClaimMeta() {
  // @@protoc_insertion_point(destructor:pb.ClaimMeta)
  SharedDtor();
}

void ClaimMeta::SharedDtor() {
  short_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete repost_;
}

void ClaimMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClaimMeta& ClaimMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ClaimMeta_result_2eproto.base);
  return *internal_default_instance();
}


void ClaimMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ClaimMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  short_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && repost_ != nullptr) {
    delete repost_;
  }
  repost_ = nullptr;
  ::memset(&is_controlling_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trending_local_) -
      reinterpret_cast<char*>(&is_controlling_)) + sizeof(trending_local_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClaimMeta::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ClaimMeta*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Output channel = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Output::_InternalParse;
        object = msg->mutable_channel();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.Output repost = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Output::_InternalParse;
        object = msg->mutable_repost();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string short_url = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.ClaimMeta.short_url");
        object = msg->mutable_short_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string canonical_url = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.ClaimMeta.canonical_url");
        object = msg->mutable_canonical_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool is_controlling = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_is_controlling(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 take_over_height = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_take_over_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 creation_height = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_creation_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 activation_height = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_activation_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 expiration_height = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_expiration_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 claims_in_channel = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_claims_in_channel(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 reposted = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_reposted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 effective_amount = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_effective_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 support_amount = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_support_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 trending_group = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_trending_group(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float trending_mixed = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 189) goto handle_unusual;
        msg->set_trending_mixed(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float trending_local = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 197) goto handle_unusual;
        msg->set_trending_local(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float trending_global = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 205) goto handle_unusual;
        msg->set_trending_global(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClaimMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ClaimMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Output channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Output repost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_repost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string short_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->short_url().data(), static_cast<int>(this->short_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.ClaimMeta.short_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string canonical_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canonical_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->canonical_url().data(), static_cast<int>(this->canonical_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.ClaimMeta.canonical_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_controlling = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_controlling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 take_over_height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &take_over_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 creation_height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creation_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 activation_height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activation_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 expiration_height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiration_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 claims_in_channel = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claims_in_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reposted = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reposted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 effective_amount = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &effective_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 support_amount = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &support_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 trending_group = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trending_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float trending_mixed = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (189 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trending_mixed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float trending_local = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (197 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trending_local_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float trending_global = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (205 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trending_global_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ClaimMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ClaimMeta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClaimMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ClaimMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Output channel = 1;
  if (this->has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::channel(this), output);
  }

  // .pb.Output repost = 2;
  if (this->has_repost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::repost(this), output);
  }

  // string short_url = 3;
  if (this->short_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_url().data(), static_cast<int>(this->short_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ClaimMeta.short_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->short_url(), output);
  }

  // string canonical_url = 4;
  if (this->canonical_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canonical_url().data(), static_cast<int>(this->canonical_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ClaimMeta.canonical_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->canonical_url(), output);
  }

  // bool is_controlling = 5;
  if (this->is_controlling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_controlling(), output);
  }

  // uint32 take_over_height = 6;
  if (this->take_over_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->take_over_height(), output);
  }

  // uint32 creation_height = 7;
  if (this->creation_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->creation_height(), output);
  }

  // uint32 activation_height = 8;
  if (this->activation_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->activation_height(), output);
  }

  // uint32 expiration_height = 9;
  if (this->expiration_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->expiration_height(), output);
  }

  // uint32 claims_in_channel = 10;
  if (this->claims_in_channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->claims_in_channel(), output);
  }

  // uint32 reposted = 11;
  if (this->reposted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->reposted(), output);
  }

  // uint64 effective_amount = 20;
  if (this->effective_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->effective_amount(), output);
  }

  // uint64 support_amount = 21;
  if (this->support_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->support_amount(), output);
  }

  // uint32 trending_group = 22;
  if (this->trending_group() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->trending_group(), output);
  }

  // float trending_mixed = 23;
  if (this->trending_mixed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->trending_mixed(), output);
  }

  // float trending_local = 24;
  if (this->trending_local() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->trending_local(), output);
  }

  // float trending_global = 25;
  if (this->trending_global() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->trending_global(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ClaimMeta)
}

::google::protobuf::uint8* ClaimMeta::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ClaimMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Output channel = 1;
  if (this->has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::channel(this), target);
  }

  // .pb.Output repost = 2;
  if (this->has_repost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::repost(this), target);
  }

  // string short_url = 3;
  if (this->short_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_url().data(), static_cast<int>(this->short_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ClaimMeta.short_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->short_url(), target);
  }

  // string canonical_url = 4;
  if (this->canonical_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canonical_url().data(), static_cast<int>(this->canonical_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ClaimMeta.canonical_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->canonical_url(), target);
  }

  // bool is_controlling = 5;
  if (this->is_controlling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_controlling(), target);
  }

  // uint32 take_over_height = 6;
  if (this->take_over_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->take_over_height(), target);
  }

  // uint32 creation_height = 7;
  if (this->creation_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->creation_height(), target);
  }

  // uint32 activation_height = 8;
  if (this->activation_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->activation_height(), target);
  }

  // uint32 expiration_height = 9;
  if (this->expiration_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->expiration_height(), target);
  }

  // uint32 claims_in_channel = 10;
  if (this->claims_in_channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->claims_in_channel(), target);
  }

  // uint32 reposted = 11;
  if (this->reposted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->reposted(), target);
  }

  // uint64 effective_amount = 20;
  if (this->effective_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->effective_amount(), target);
  }

  // uint64 support_amount = 21;
  if (this->support_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->support_amount(), target);
  }

  // uint32 trending_group = 22;
  if (this->trending_group() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->trending_group(), target);
  }

  // float trending_mixed = 23;
  if (this->trending_mixed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->trending_mixed(), target);
  }

  // float trending_local = 24;
  if (this->trending_local() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->trending_local(), target);
  }

  // float trending_global = 25;
  if (this->trending_global() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->trending_global(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ClaimMeta)
  return target;
}

size_t ClaimMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ClaimMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string short_url = 3;
  if (this->short_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->short_url());
  }

  // string canonical_url = 4;
  if (this->canonical_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->canonical_url());
  }

  // .pb.Output channel = 1;
  if (this->has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // .pb.Output repost = 2;
  if (this->has_repost()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *repost_);
  }

  // bool is_controlling = 5;
  if (this->is_controlling() != 0) {
    total_size += 1 + 1;
  }

  // uint32 take_over_height = 6;
  if (this->take_over_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->take_over_height());
  }

  // uint32 creation_height = 7;
  if (this->creation_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->creation_height());
  }

  // uint32 activation_height = 8;
  if (this->activation_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activation_height());
  }

  // uint32 expiration_height = 9;
  if (this->expiration_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expiration_height());
  }

  // uint32 claims_in_channel = 10;
  if (this->claims_in_channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->claims_in_channel());
  }

  // uint32 reposted = 11;
  if (this->reposted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reposted());
  }

  // uint32 trending_group = 22;
  if (this->trending_group() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trending_group());
  }

  // float trending_global = 25;
  if (this->trending_global() != 0) {
    total_size += 2 + 4;
  }

  // uint64 effective_amount = 20;
  if (this->effective_amount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->effective_amount());
  }

  // uint64 support_amount = 21;
  if (this->support_amount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->support_amount());
  }

  // float trending_mixed = 23;
  if (this->trending_mixed() != 0) {
    total_size += 2 + 4;
  }

  // float trending_local = 24;
  if (this->trending_local() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClaimMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ClaimMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const ClaimMeta* source =
      ::google::protobuf::DynamicCastToGenerated<ClaimMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ClaimMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ClaimMeta)
    MergeFrom(*source);
  }
}

void ClaimMeta::MergeFrom(const ClaimMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ClaimMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.short_url().size() > 0) {

    short_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_url_);
  }
  if (from.canonical_url().size() > 0) {

    canonical_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_url_);
  }
  if (from.has_channel()) {
    mutable_channel()->::pb::Output::MergeFrom(from.channel());
  }
  if (from.has_repost()) {
    mutable_repost()->::pb::Output::MergeFrom(from.repost());
  }
  if (from.is_controlling() != 0) {
    set_is_controlling(from.is_controlling());
  }
  if (from.take_over_height() != 0) {
    set_take_over_height(from.take_over_height());
  }
  if (from.creation_height() != 0) {
    set_creation_height(from.creation_height());
  }
  if (from.activation_height() != 0) {
    set_activation_height(from.activation_height());
  }
  if (from.expiration_height() != 0) {
    set_expiration_height(from.expiration_height());
  }
  if (from.claims_in_channel() != 0) {
    set_claims_in_channel(from.claims_in_channel());
  }
  if (from.reposted() != 0) {
    set_reposted(from.reposted());
  }
  if (from.trending_group() != 0) {
    set_trending_group(from.trending_group());
  }
  if (from.trending_global() != 0) {
    set_trending_global(from.trending_global());
  }
  if (from.effective_amount() != 0) {
    set_effective_amount(from.effective_amount());
  }
  if (from.support_amount() != 0) {
    set_support_amount(from.support_amount());
  }
  if (from.trending_mixed() != 0) {
    set_trending_mixed(from.trending_mixed());
  }
  if (from.trending_local() != 0) {
    set_trending_local(from.trending_local());
  }
}

void ClaimMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ClaimMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClaimMeta::CopyFrom(const ClaimMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ClaimMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClaimMeta::IsInitialized() const {
  return true;
}

void ClaimMeta::Swap(ClaimMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClaimMeta::InternalSwap(ClaimMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  short_url_.Swap(&other->short_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  canonical_url_.Swap(&other->canonical_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(repost_, other->repost_);
  swap(is_controlling_, other->is_controlling_);
  swap(take_over_height_, other->take_over_height_);
  swap(creation_height_, other->creation_height_);
  swap(activation_height_, other->activation_height_);
  swap(expiration_height_, other->expiration_height_);
  swap(claims_in_channel_, other->claims_in_channel_);
  swap(reposted_, other->reposted_);
  swap(trending_group_, other->trending_group_);
  swap(trending_global_, other->trending_global_);
  swap(effective_amount_, other->effective_amount_);
  swap(support_amount_, other->support_amount_);
  swap(trending_mixed_, other->trending_mixed_);
  swap(trending_local_, other->trending_local_);
}

::google::protobuf::Metadata ClaimMeta::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_result_2eproto);
  return ::file_level_metadata_result_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Error::InitAsDefaultInstance() {
}
class Error::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kCodeFieldNumber;
const int Error::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:pb.Error)
}

void Error::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Error_result_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:pb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Error_result_2eproto.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Error::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Error*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Error.Code code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_code(static_cast<::pb::Error_Code>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string text = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Error.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Error)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Error.Code code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::pb::Error_Code >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Error.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Error)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Error.Code code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Error.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Error.Code code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Error.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // .pb.Error.Code code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::DynamicCastToGenerated<Error>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_result_2eproto);
  return ::file_level_metadata_result_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pb::Outputs* Arena::CreateMaybeMessage< ::pb::Outputs >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Outputs >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Output* Arena::CreateMaybeMessage< ::pb::Output >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Output >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ClaimMeta* Arena::CreateMaybeMessage< ::pb::ClaimMeta >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ClaimMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Error* Arena::CreateMaybeMessage< ::pb::Error >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Error >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
