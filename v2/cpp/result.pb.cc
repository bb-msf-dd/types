// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
class OutputsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Outputs> {
} _Outputs_default_instance_;
class OutputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Output> {
  public:
  const ::pb::ClaimMeta* claim_;
  const ::pb::Error* error_;
} _Output_default_instance_;
class ClaimMetaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClaimMeta> {
} _ClaimMeta_default_instance_;
class ErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Error> {
} _Error_default_instance_;
class BlockedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Blocked> {
} _Blocked_default_instance_;

namespace protobuf_result_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outputs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outputs, txos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outputs, extra_txos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outputs, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outputs, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outputs, blocked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outputs, blocked_total_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, tx_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, nout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, height_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Output_default_instance_), claim_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Output_default_instance_), error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, meta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, repost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, short_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, canonical_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, is_controlling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, take_over_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, creation_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, activation_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, expiration_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, claims_in_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, reposted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, effective_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, support_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, trending_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, trending_mixed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, trending_local_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimMeta, trending_global_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, blocked_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blocked, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blocked, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blocked, channel_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Outputs)},
  { 10, -1, sizeof(Output)},
  { 20, -1, sizeof(ClaimMeta)},
  { 41, -1, sizeof(Error)},
  { 48, -1, sizeof(Blocked)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Outputs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Output_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClaimMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Blocked_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "result.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _Outputs_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Output_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ClaimMeta_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Error_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Blocked_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Outputs_default_instance_.DefaultConstruct();
  _Output_default_instance_.DefaultConstruct();
  _ClaimMeta_default_instance_.DefaultConstruct();
  _Error_default_instance_.DefaultConstruct();
  _Blocked_default_instance_.DefaultConstruct();
  _Output_default_instance_.claim_ = const_cast< ::pb::ClaimMeta*>(
      ::pb::ClaimMeta::internal_default_instance());
  _Output_default_instance_.error_ = const_cast< ::pb::Error*>(
      ::pb::Error::internal_default_instance());
  _ClaimMeta_default_instance_.get_mutable()->channel_ = const_cast< ::pb::Output*>(
      ::pb::Output::internal_default_instance());
  _ClaimMeta_default_instance_.get_mutable()->repost_ = const_cast< ::pb::Output*>(
      ::pb::Output::internal_default_instance());
  _Error_default_instance_.get_mutable()->blocked_ = const_cast< ::pb::Blocked*>(
      ::pb::Blocked::internal_default_instance());
  _Blocked_default_instance_.get_mutable()->channel_ = const_cast< ::pb::Output*>(
      ::pb::Output::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014result.proto\022\002pb\"\227\001\n\007Outputs\022\030\n\004txos\030\001"
      " \003(\0132\n.pb.Output\022\036\n\nextra_txos\030\002 \003(\0132\n.p"
      "b.Output\022\r\n\005total\030\003 \001(\r\022\016\n\006offset\030\004 \001(\r\022"
      "\034\n\007blocked\030\005 \003(\0132\013.pb.Blocked\022\025\n\rblocked"
      "_total\030\006 \001(\r\"{\n\006Output\022\017\n\007tx_hash\030\001 \001(\014\022"
      "\014\n\004nout\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\036\n\005claim\030\007"
      " \001(\0132\r.pb.ClaimMetaH\000\022\032\n\005error\030\017 \001(\0132\t.p"
      "b.ErrorH\000B\006\n\004meta\"\257\003\n\tClaimMeta\022\033\n\007chann"
      "el\030\001 \001(\0132\n.pb.Output\022\032\n\006repost\030\002 \001(\0132\n.p"
      "b.Output\022\021\n\tshort_url\030\003 \001(\t\022\025\n\rcanonical"
      "_url\030\004 \001(\t\022\026\n\016is_controlling\030\005 \001(\010\022\030\n\020ta"
      "ke_over_height\030\006 \001(\r\022\027\n\017creation_height\030"
      "\007 \001(\r\022\031\n\021activation_height\030\010 \001(\r\022\031\n\021expi"
      "ration_height\030\t \001(\r\022\031\n\021claims_in_channel"
      "\030\n \001(\r\022\020\n\010reposted\030\013 \001(\r\022\030\n\020effective_am"
      "ount\030\024 \001(\004\022\026\n\016support_amount\030\025 \001(\004\022\026\n\016tr"
      "ending_group\030\026 \001(\r\022\026\n\016trending_mixed\030\027 \001"
      "(\002\022\026\n\016trending_local\030\030 \001(\002\022\027\n\017trending_g"
      "lobal\030\031 \001(\002\"\224\001\n\005Error\022\034\n\004code\030\001 \001(\0162\016.pb"
      ".Error.Code\022\014\n\004text\030\002 \001(\t\022\034\n\007blocked\030\003 \001"
      "(\0132\013.pb.Blocked\"A\n\004Code\022\020\n\014UNKNOWN_CODE\020"
      "\000\022\r\n\tNOT_FOUND\020\001\022\013\n\007INVALID\020\002\022\013\n\007BLOCKED"
      "\020\003\"5\n\007Blocked\022\r\n\005count\030\001 \001(\r\022\033\n\007channel\030"
      "\002 \001(\0132\n.pb.OutputB\004Z\002./b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 951);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "result.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_result_2eproto

const ::google::protobuf::EnumDescriptor* Error_Code_descriptor() {
  protobuf_result_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_result_2eproto::file_level_enum_descriptors[0];
}
bool Error_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Error_Code Error::UNKNOWN_CODE;
const Error_Code Error::NOT_FOUND;
const Error_Code Error::INVALID;
const Error_Code Error::BLOCKED;
const Error_Code Error::Code_MIN;
const Error_Code Error::Code_MAX;
const int Error::Code_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Outputs::kTxosFieldNumber;
const int Outputs::kExtraTxosFieldNumber;
const int Outputs::kTotalFieldNumber;
const int Outputs::kOffsetFieldNumber;
const int Outputs::kBlockedFieldNumber;
const int Outputs::kBlockedTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Outputs::Outputs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_result_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Outputs)
}
Outputs::Outputs(const Outputs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      txos_(from.txos_),
      extra_txos_(from.extra_txos_),
      blocked_(from.blocked_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    reinterpret_cast<char*>(&blocked_total_) -
    reinterpret_cast<char*>(&total_) + sizeof(blocked_total_));
  // @@protoc_insertion_point(copy_constructor:pb.Outputs)
}

void Outputs::SharedCtor() {
  ::memset(&total_, 0, reinterpret_cast<char*>(&blocked_total_) -
    reinterpret_cast<char*>(&total_) + sizeof(blocked_total_));
  _cached_size_ = 0;
}

Outputs::~Outputs() {
  // @@protoc_insertion_point(destructor:pb.Outputs)
  SharedDtor();
}

void Outputs::SharedDtor() {
}

void Outputs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Outputs::descriptor() {
  protobuf_result_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_result_2eproto::file_level_metadata[0].descriptor;
}

const Outputs& Outputs::default_instance() {
  protobuf_result_2eproto::InitDefaults();
  return *internal_default_instance();
}

Outputs* Outputs::New(::google::protobuf::Arena* arena) const {
  Outputs* n = new Outputs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Outputs::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Outputs)
  txos_.Clear();
  extra_txos_.Clear();
  blocked_.Clear();
  ::memset(&total_, 0, reinterpret_cast<char*>(&blocked_total_) -
    reinterpret_cast<char*>(&total_) + sizeof(blocked_total_));
}

bool Outputs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Outputs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Output txos = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_txos()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pb.Output extra_txos = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_extra_txos()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // uint32 total = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 offset = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.Blocked blocked = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blocked()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // uint32 blocked_total = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blocked_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Outputs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Outputs)
  return false;
#undef DO_
}

void Outputs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Outputs)
  // repeated .pb.Output txos = 1;
  for (unsigned int i = 0, n = this->txos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->txos(i), output);
  }

  // repeated .pb.Output extra_txos = 2;
  for (unsigned int i = 0, n = this->extra_txos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extra_txos(i), output);
  }

  // uint32 total = 3;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total(), output);
  }

  // uint32 offset = 4;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset(), output);
  }

  // repeated .pb.Blocked blocked = 5;
  for (unsigned int i = 0, n = this->blocked_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->blocked(i), output);
  }

  // uint32 blocked_total = 6;
  if (this->blocked_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->blocked_total(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Outputs)
}

::google::protobuf::uint8* Outputs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Outputs)
  // repeated .pb.Output txos = 1;
  for (unsigned int i = 0, n = this->txos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->txos(i), false, target);
  }

  // repeated .pb.Output extra_txos = 2;
  for (unsigned int i = 0, n = this->extra_txos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->extra_txos(i), false, target);
  }

  // uint32 total = 3;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total(), target);
  }

  // uint32 offset = 4;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offset(), target);
  }

  // repeated .pb.Blocked blocked = 5;
  for (unsigned int i = 0, n = this->blocked_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->blocked(i), false, target);
  }

  // uint32 blocked_total = 6;
  if (this->blocked_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->blocked_total(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Outputs)
  return target;
}

size_t Outputs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Outputs)
  size_t total_size = 0;

  // repeated .pb.Output txos = 1;
  {
    unsigned int count = this->txos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txos(i));
    }
  }

  // repeated .pb.Output extra_txos = 2;
  {
    unsigned int count = this->extra_txos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra_txos(i));
    }
  }

  // repeated .pb.Blocked blocked = 5;
  {
    unsigned int count = this->blocked_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocked(i));
    }
  }

  // uint32 total = 3;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total());
  }

  // uint32 offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  // uint32 blocked_total = 6;
  if (this->blocked_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blocked_total());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Outputs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Outputs)
  GOOGLE_DCHECK_NE(&from, this);
  const Outputs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Outputs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Outputs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Outputs)
    MergeFrom(*source);
  }
}

void Outputs::MergeFrom(const Outputs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Outputs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txos_.MergeFrom(from.txos_);
  extra_txos_.MergeFrom(from.extra_txos_);
  blocked_.MergeFrom(from.blocked_);
  if (from.total() != 0) {
    set_total(from.total());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.blocked_total() != 0) {
    set_blocked_total(from.blocked_total());
  }
}

void Outputs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Outputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Outputs::CopyFrom(const Outputs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Outputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Outputs::IsInitialized() const {
  return true;
}

void Outputs::Swap(Outputs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Outputs::InternalSwap(Outputs* other) {
  txos_.UnsafeArenaSwap(&other->txos_);
  extra_txos_.UnsafeArenaSwap(&other->extra_txos_);
  blocked_.UnsafeArenaSwap(&other->blocked_);
  std::swap(total_, other->total_);
  std::swap(offset_, other->offset_);
  std::swap(blocked_total_, other->blocked_total_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Outputs::GetMetadata() const {
  protobuf_result_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_result_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Outputs

// repeated .pb.Output txos = 1;
int Outputs::txos_size() const {
  return txos_.size();
}
void Outputs::clear_txos() {
  txos_.Clear();
}
const ::pb::Output& Outputs::txos(int index) const {
  // @@protoc_insertion_point(field_get:pb.Outputs.txos)
  return txos_.Get(index);
}
::pb::Output* Outputs::mutable_txos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Outputs.txos)
  return txos_.Mutable(index);
}
::pb::Output* Outputs::add_txos() {
  // @@protoc_insertion_point(field_add:pb.Outputs.txos)
  return txos_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::Output >*
Outputs::mutable_txos() {
  // @@protoc_insertion_point(field_mutable_list:pb.Outputs.txos)
  return &txos_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::Output >&
Outputs::txos() const {
  // @@protoc_insertion_point(field_list:pb.Outputs.txos)
  return txos_;
}

// repeated .pb.Output extra_txos = 2;
int Outputs::extra_txos_size() const {
  return extra_txos_.size();
}
void Outputs::clear_extra_txos() {
  extra_txos_.Clear();
}
const ::pb::Output& Outputs::extra_txos(int index) const {
  // @@protoc_insertion_point(field_get:pb.Outputs.extra_txos)
  return extra_txos_.Get(index);
}
::pb::Output* Outputs::mutable_extra_txos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Outputs.extra_txos)
  return extra_txos_.Mutable(index);
}
::pb::Output* Outputs::add_extra_txos() {
  // @@protoc_insertion_point(field_add:pb.Outputs.extra_txos)
  return extra_txos_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::Output >*
Outputs::mutable_extra_txos() {
  // @@protoc_insertion_point(field_mutable_list:pb.Outputs.extra_txos)
  return &extra_txos_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::Output >&
Outputs::extra_txos() const {
  // @@protoc_insertion_point(field_list:pb.Outputs.extra_txos)
  return extra_txos_;
}

// uint32 total = 3;
void Outputs::clear_total() {
  total_ = 0u;
}
::google::protobuf::uint32 Outputs::total() const {
  // @@protoc_insertion_point(field_get:pb.Outputs.total)
  return total_;
}
void Outputs::set_total(::google::protobuf::uint32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:pb.Outputs.total)
}

// uint32 offset = 4;
void Outputs::clear_offset() {
  offset_ = 0u;
}
::google::protobuf::uint32 Outputs::offset() const {
  // @@protoc_insertion_point(field_get:pb.Outputs.offset)
  return offset_;
}
void Outputs::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.Outputs.offset)
}

// repeated .pb.Blocked blocked = 5;
int Outputs::blocked_size() const {
  return blocked_.size();
}
void Outputs::clear_blocked() {
  blocked_.Clear();
}
const ::pb::Blocked& Outputs::blocked(int index) const {
  // @@protoc_insertion_point(field_get:pb.Outputs.blocked)
  return blocked_.Get(index);
}
::pb::Blocked* Outputs::mutable_blocked(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Outputs.blocked)
  return blocked_.Mutable(index);
}
::pb::Blocked* Outputs::add_blocked() {
  // @@protoc_insertion_point(field_add:pb.Outputs.blocked)
  return blocked_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::Blocked >*
Outputs::mutable_blocked() {
  // @@protoc_insertion_point(field_mutable_list:pb.Outputs.blocked)
  return &blocked_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::Blocked >&
Outputs::blocked() const {
  // @@protoc_insertion_point(field_list:pb.Outputs.blocked)
  return blocked_;
}

// uint32 blocked_total = 6;
void Outputs::clear_blocked_total() {
  blocked_total_ = 0u;
}
::google::protobuf::uint32 Outputs::blocked_total() const {
  // @@protoc_insertion_point(field_get:pb.Outputs.blocked_total)
  return blocked_total_;
}
void Outputs::set_blocked_total(::google::protobuf::uint32 value) {
  
  blocked_total_ = value;
  // @@protoc_insertion_point(field_set:pb.Outputs.blocked_total)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Output::kTxHashFieldNumber;
const int Output::kNoutFieldNumber;
const int Output::kHeightFieldNumber;
const int Output::kClaimFieldNumber;
const int Output::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Output::Output()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_result_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Output)
}
Output::Output(const Output& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tx_hash().size() > 0) {
    tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  ::memcpy(&nout_, &from.nout_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&nout_) + sizeof(height_));
  clear_has_meta();
  switch (from.meta_case()) {
    case kClaim: {
      mutable_claim()->::pb::ClaimMeta::MergeFrom(from.claim());
      break;
    }
    case kError: {
      mutable_error()->::pb::Error::MergeFrom(from.error());
      break;
    }
    case META_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.Output)
}

void Output::SharedCtor() {
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nout_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&nout_) + sizeof(height_));
  clear_has_meta();
  _cached_size_ = 0;
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:pb.Output)
  SharedDtor();
}

void Output::SharedDtor() {
  tx_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_meta()) {
    clear_meta();
  }
}

void Output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Output::descriptor() {
  protobuf_result_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_result_2eproto::file_level_metadata[1].descriptor;
}

const Output& Output::default_instance() {
  protobuf_result_2eproto::InitDefaults();
  return *internal_default_instance();
}

Output* Output::New(::google::protobuf::Arena* arena) const {
  Output* n = new Output;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Output::clear_meta() {
// @@protoc_insertion_point(one_of_clear_start:pb.Output)
  switch (meta_case()) {
    case kClaim: {
      delete meta_.claim_;
      break;
    }
    case kError: {
      delete meta_.error_;
      break;
    }
    case META_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = META_NOT_SET;
}


void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Output)
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nout_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&nout_) + sizeof(height_));
  clear_meta();
}

bool Output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Output)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes tx_hash = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nout = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ClaimMeta claim = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_claim()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Error error = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Output)
  return false;
#undef DO_
}

void Output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Output)
  // bytes tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tx_hash(), output);
  }

  // uint32 nout = 2;
  if (this->nout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nout(), output);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // .pb.ClaimMeta claim = 7;
  if (has_claim()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *meta_.claim_, output);
  }

  // .pb.Error error = 15;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *meta_.error_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Output)
}

::google::protobuf::uint8* Output::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Output)
  // bytes tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tx_hash(), target);
  }

  // uint32 nout = 2;
  if (this->nout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nout(), target);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // .pb.ClaimMeta claim = 7;
  if (has_claim()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *meta_.claim_, false, target);
  }

  // .pb.Error error = 15;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *meta_.error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Output)
  size_t total_size = 0;

  // bytes tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tx_hash());
  }

  // uint32 nout = 2;
  if (this->nout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nout());
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  switch (meta_case()) {
    // .pb.ClaimMeta claim = 7;
    case kClaim: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *meta_.claim_);
      break;
    }
    // .pb.Error error = 15;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *meta_.error_);
      break;
    }
    case META_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Output::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Output)
  GOOGLE_DCHECK_NE(&from, this);
  const Output* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Output>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Output)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Output)
    MergeFrom(*source);
  }
}

void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.tx_hash().size() > 0) {

    tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  if (from.nout() != 0) {
    set_nout(from.nout());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  switch (from.meta_case()) {
    case kClaim: {
      mutable_claim()->::pb::ClaimMeta::MergeFrom(from.claim());
      break;
    }
    case kError: {
      mutable_error()->::pb::Error::MergeFrom(from.error());
      break;
    }
    case META_NOT_SET: {
      break;
    }
  }
}

void Output::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  return true;
}

void Output::Swap(Output* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Output::InternalSwap(Output* other) {
  tx_hash_.Swap(&other->tx_hash_);
  std::swap(nout_, other->nout_);
  std::swap(height_, other->height_);
  std::swap(meta_, other->meta_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Output::GetMetadata() const {
  protobuf_result_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_result_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Output

// bytes tx_hash = 1;
void Output::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Output::tx_hash() const {
  // @@protoc_insertion_point(field_get:pb.Output.tx_hash)
  return tx_hash_.GetNoArena();
}
void Output::set_tx_hash(const ::std::string& value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Output.tx_hash)
}
#if LANG_CXX11
void Output::set_tx_hash(::std::string&& value) {
  
  tx_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Output.tx_hash)
}
#endif
void Output::set_tx_hash(const char* value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Output.tx_hash)
}
void Output::set_tx_hash(const void* value, size_t size) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Output.tx_hash)
}
::std::string* Output::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:pb.Output.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Output::release_tx_hash() {
  // @@protoc_insertion_point(field_release:pb.Output.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Output::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:pb.Output.tx_hash)
}

// uint32 nout = 2;
void Output::clear_nout() {
  nout_ = 0u;
}
::google::protobuf::uint32 Output::nout() const {
  // @@protoc_insertion_point(field_get:pb.Output.nout)
  return nout_;
}
void Output::set_nout(::google::protobuf::uint32 value) {
  
  nout_ = value;
  // @@protoc_insertion_point(field_set:pb.Output.nout)
}

// uint32 height = 3;
void Output::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 Output::height() const {
  // @@protoc_insertion_point(field_get:pb.Output.height)
  return height_;
}
void Output::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:pb.Output.height)
}

// .pb.ClaimMeta claim = 7;
bool Output::has_claim() const {
  return meta_case() == kClaim;
}
void Output::set_has_claim() {
  _oneof_case_[0] = kClaim;
}
void Output::clear_claim() {
  if (has_claim()) {
    delete meta_.claim_;
    clear_has_meta();
  }
}
 const ::pb::ClaimMeta& Output::claim() const {
  // @@protoc_insertion_point(field_get:pb.Output.claim)
  return has_claim()
      ? *meta_.claim_
      : ::pb::ClaimMeta::default_instance();
}
::pb::ClaimMeta* Output::mutable_claim() {
  if (!has_claim()) {
    clear_meta();
    set_has_claim();
    meta_.claim_ = new ::pb::ClaimMeta;
  }
  // @@protoc_insertion_point(field_mutable:pb.Output.claim)
  return meta_.claim_;
}
::pb::ClaimMeta* Output::release_claim() {
  // @@protoc_insertion_point(field_release:pb.Output.claim)
  if (has_claim()) {
    clear_has_meta();
    ::pb::ClaimMeta* temp = meta_.claim_;
    meta_.claim_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Output::set_allocated_claim(::pb::ClaimMeta* claim) {
  clear_meta();
  if (claim) {
    set_has_claim();
    meta_.claim_ = claim;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Output.claim)
}

// .pb.Error error = 15;
bool Output::has_error() const {
  return meta_case() == kError;
}
void Output::set_has_error() {
  _oneof_case_[0] = kError;
}
void Output::clear_error() {
  if (has_error()) {
    delete meta_.error_;
    clear_has_meta();
  }
}
 const ::pb::Error& Output::error() const {
  // @@protoc_insertion_point(field_get:pb.Output.error)
  return has_error()
      ? *meta_.error_
      : ::pb::Error::default_instance();
}
::pb::Error* Output::mutable_error() {
  if (!has_error()) {
    clear_meta();
    set_has_error();
    meta_.error_ = new ::pb::Error;
  }
  // @@protoc_insertion_point(field_mutable:pb.Output.error)
  return meta_.error_;
}
::pb::Error* Output::release_error() {
  // @@protoc_insertion_point(field_release:pb.Output.error)
  if (has_error()) {
    clear_has_meta();
    ::pb::Error* temp = meta_.error_;
    meta_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Output::set_allocated_error(::pb::Error* error) {
  clear_meta();
  if (error) {
    set_has_error();
    meta_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Output.error)
}

bool Output::has_meta() const {
  return meta_case() != META_NOT_SET;
}
void Output::clear_has_meta() {
  _oneof_case_[0] = META_NOT_SET;
}
Output::MetaCase Output::meta_case() const {
  return Output::MetaCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClaimMeta::kChannelFieldNumber;
const int ClaimMeta::kRepostFieldNumber;
const int ClaimMeta::kShortUrlFieldNumber;
const int ClaimMeta::kCanonicalUrlFieldNumber;
const int ClaimMeta::kIsControllingFieldNumber;
const int ClaimMeta::kTakeOverHeightFieldNumber;
const int ClaimMeta::kCreationHeightFieldNumber;
const int ClaimMeta::kActivationHeightFieldNumber;
const int ClaimMeta::kExpirationHeightFieldNumber;
const int ClaimMeta::kClaimsInChannelFieldNumber;
const int ClaimMeta::kRepostedFieldNumber;
const int ClaimMeta::kEffectiveAmountFieldNumber;
const int ClaimMeta::kSupportAmountFieldNumber;
const int ClaimMeta::kTrendingGroupFieldNumber;
const int ClaimMeta::kTrendingMixedFieldNumber;
const int ClaimMeta::kTrendingLocalFieldNumber;
const int ClaimMeta::kTrendingGlobalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClaimMeta::ClaimMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_result_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ClaimMeta)
}
ClaimMeta::ClaimMeta(const ClaimMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  short_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.short_url().size() > 0) {
    short_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_url_);
  }
  canonical_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.canonical_url().size() > 0) {
    canonical_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_url_);
  }
  if (from.has_channel()) {
    channel_ = new ::pb::Output(*from.channel_);
  } else {
    channel_ = NULL;
  }
  if (from.has_repost()) {
    repost_ = new ::pb::Output(*from.repost_);
  } else {
    repost_ = NULL;
  }
  ::memcpy(&is_controlling_, &from.is_controlling_,
    reinterpret_cast<char*>(&trending_global_) -
    reinterpret_cast<char*>(&is_controlling_) + sizeof(trending_global_));
  // @@protoc_insertion_point(copy_constructor:pb.ClaimMeta)
}

void ClaimMeta::SharedCtor() {
  short_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, reinterpret_cast<char*>(&trending_global_) -
    reinterpret_cast<char*>(&channel_) + sizeof(trending_global_));
  _cached_size_ = 0;
}

ClaimMeta::~ClaimMeta() {
  // @@protoc_insertion_point(destructor:pb.ClaimMeta)
  SharedDtor();
}

void ClaimMeta::SharedDtor() {
  short_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete channel_;
  }
  if (this != internal_default_instance()) {
    delete repost_;
  }
}

void ClaimMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClaimMeta::descriptor() {
  protobuf_result_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_result_2eproto::file_level_metadata[2].descriptor;
}

const ClaimMeta& ClaimMeta::default_instance() {
  protobuf_result_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClaimMeta* ClaimMeta::New(::google::protobuf::Arena* arena) const {
  ClaimMeta* n = new ClaimMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClaimMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ClaimMeta)
  short_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
  if (GetArenaNoVirtual() == NULL && repost_ != NULL) {
    delete repost_;
  }
  repost_ = NULL;
  ::memset(&is_controlling_, 0, reinterpret_cast<char*>(&trending_global_) -
    reinterpret_cast<char*>(&is_controlling_) + sizeof(trending_global_));
}

bool ClaimMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ClaimMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Output channel = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Output repost = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_repost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string short_url = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->short_url().data(), this->short_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.ClaimMeta.short_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string canonical_url = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canonical_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->canonical_url().data(), this->canonical_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.ClaimMeta.canonical_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_controlling = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_controlling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 take_over_height = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &take_over_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 creation_height = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creation_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 activation_height = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activation_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 expiration_height = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiration_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 claims_in_channel = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claims_in_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reposted = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reposted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 effective_amount = 20;
      case 20: {
        if (tag == 160u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &effective_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 support_amount = 21;
      case 21: {
        if (tag == 168u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &support_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 trending_group = 22;
      case 22: {
        if (tag == 176u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trending_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float trending_mixed = 23;
      case 23: {
        if (tag == 189u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trending_mixed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float trending_local = 24;
      case 24: {
        if (tag == 197u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trending_local_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float trending_global = 25;
      case 25: {
        if (tag == 205u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trending_global_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ClaimMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ClaimMeta)
  return false;
#undef DO_
}

void ClaimMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ClaimMeta)
  // .pb.Output channel = 1;
  if (this->has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->channel_, output);
  }

  // .pb.Output repost = 2;
  if (this->has_repost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->repost_, output);
  }

  // string short_url = 3;
  if (this->short_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_url().data(), this->short_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ClaimMeta.short_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->short_url(), output);
  }

  // string canonical_url = 4;
  if (this->canonical_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canonical_url().data(), this->canonical_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ClaimMeta.canonical_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->canonical_url(), output);
  }

  // bool is_controlling = 5;
  if (this->is_controlling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_controlling(), output);
  }

  // uint32 take_over_height = 6;
  if (this->take_over_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->take_over_height(), output);
  }

  // uint32 creation_height = 7;
  if (this->creation_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->creation_height(), output);
  }

  // uint32 activation_height = 8;
  if (this->activation_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->activation_height(), output);
  }

  // uint32 expiration_height = 9;
  if (this->expiration_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->expiration_height(), output);
  }

  // uint32 claims_in_channel = 10;
  if (this->claims_in_channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->claims_in_channel(), output);
  }

  // uint32 reposted = 11;
  if (this->reposted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->reposted(), output);
  }

  // uint64 effective_amount = 20;
  if (this->effective_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->effective_amount(), output);
  }

  // uint64 support_amount = 21;
  if (this->support_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->support_amount(), output);
  }

  // uint32 trending_group = 22;
  if (this->trending_group() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->trending_group(), output);
  }

  // float trending_mixed = 23;
  if (this->trending_mixed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->trending_mixed(), output);
  }

  // float trending_local = 24;
  if (this->trending_local() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->trending_local(), output);
  }

  // float trending_global = 25;
  if (this->trending_global() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->trending_global(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.ClaimMeta)
}

::google::protobuf::uint8* ClaimMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.ClaimMeta)
  // .pb.Output channel = 1;
  if (this->has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->channel_, false, target);
  }

  // .pb.Output repost = 2;
  if (this->has_repost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->repost_, false, target);
  }

  // string short_url = 3;
  if (this->short_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_url().data(), this->short_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ClaimMeta.short_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->short_url(), target);
  }

  // string canonical_url = 4;
  if (this->canonical_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canonical_url().data(), this->canonical_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ClaimMeta.canonical_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->canonical_url(), target);
  }

  // bool is_controlling = 5;
  if (this->is_controlling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_controlling(), target);
  }

  // uint32 take_over_height = 6;
  if (this->take_over_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->take_over_height(), target);
  }

  // uint32 creation_height = 7;
  if (this->creation_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->creation_height(), target);
  }

  // uint32 activation_height = 8;
  if (this->activation_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->activation_height(), target);
  }

  // uint32 expiration_height = 9;
  if (this->expiration_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->expiration_height(), target);
  }

  // uint32 claims_in_channel = 10;
  if (this->claims_in_channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->claims_in_channel(), target);
  }

  // uint32 reposted = 11;
  if (this->reposted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->reposted(), target);
  }

  // uint64 effective_amount = 20;
  if (this->effective_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->effective_amount(), target);
  }

  // uint64 support_amount = 21;
  if (this->support_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->support_amount(), target);
  }

  // uint32 trending_group = 22;
  if (this->trending_group() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->trending_group(), target);
  }

  // float trending_mixed = 23;
  if (this->trending_mixed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->trending_mixed(), target);
  }

  // float trending_local = 24;
  if (this->trending_local() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->trending_local(), target);
  }

  // float trending_global = 25;
  if (this->trending_global() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->trending_global(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.ClaimMeta)
  return target;
}

size_t ClaimMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ClaimMeta)
  size_t total_size = 0;

  // string short_url = 3;
  if (this->short_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->short_url());
  }

  // string canonical_url = 4;
  if (this->canonical_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->canonical_url());
  }

  // .pb.Output channel = 1;
  if (this->has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->channel_);
  }

  // .pb.Output repost = 2;
  if (this->has_repost()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->repost_);
  }

  // bool is_controlling = 5;
  if (this->is_controlling() != 0) {
    total_size += 1 + 1;
  }

  // uint32 take_over_height = 6;
  if (this->take_over_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->take_over_height());
  }

  // uint32 creation_height = 7;
  if (this->creation_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->creation_height());
  }

  // uint32 activation_height = 8;
  if (this->activation_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activation_height());
  }

  // uint32 expiration_height = 9;
  if (this->expiration_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expiration_height());
  }

  // uint32 claims_in_channel = 10;
  if (this->claims_in_channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->claims_in_channel());
  }

  // uint64 effective_amount = 20;
  if (this->effective_amount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->effective_amount());
  }

  // uint32 reposted = 11;
  if (this->reposted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reposted());
  }

  // uint32 trending_group = 22;
  if (this->trending_group() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trending_group());
  }

  // uint64 support_amount = 21;
  if (this->support_amount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->support_amount());
  }

  // float trending_mixed = 23;
  if (this->trending_mixed() != 0) {
    total_size += 2 + 4;
  }

  // float trending_local = 24;
  if (this->trending_local() != 0) {
    total_size += 2 + 4;
  }

  // float trending_global = 25;
  if (this->trending_global() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClaimMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ClaimMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const ClaimMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClaimMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ClaimMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ClaimMeta)
    MergeFrom(*source);
  }
}

void ClaimMeta::MergeFrom(const ClaimMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ClaimMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.short_url().size() > 0) {

    short_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_url_);
  }
  if (from.canonical_url().size() > 0) {

    canonical_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_url_);
  }
  if (from.has_channel()) {
    mutable_channel()->::pb::Output::MergeFrom(from.channel());
  }
  if (from.has_repost()) {
    mutable_repost()->::pb::Output::MergeFrom(from.repost());
  }
  if (from.is_controlling() != 0) {
    set_is_controlling(from.is_controlling());
  }
  if (from.take_over_height() != 0) {
    set_take_over_height(from.take_over_height());
  }
  if (from.creation_height() != 0) {
    set_creation_height(from.creation_height());
  }
  if (from.activation_height() != 0) {
    set_activation_height(from.activation_height());
  }
  if (from.expiration_height() != 0) {
    set_expiration_height(from.expiration_height());
  }
  if (from.claims_in_channel() != 0) {
    set_claims_in_channel(from.claims_in_channel());
  }
  if (from.effective_amount() != 0) {
    set_effective_amount(from.effective_amount());
  }
  if (from.reposted() != 0) {
    set_reposted(from.reposted());
  }
  if (from.trending_group() != 0) {
    set_trending_group(from.trending_group());
  }
  if (from.support_amount() != 0) {
    set_support_amount(from.support_amount());
  }
  if (from.trending_mixed() != 0) {
    set_trending_mixed(from.trending_mixed());
  }
  if (from.trending_local() != 0) {
    set_trending_local(from.trending_local());
  }
  if (from.trending_global() != 0) {
    set_trending_global(from.trending_global());
  }
}

void ClaimMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ClaimMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClaimMeta::CopyFrom(const ClaimMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ClaimMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClaimMeta::IsInitialized() const {
  return true;
}

void ClaimMeta::Swap(ClaimMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClaimMeta::InternalSwap(ClaimMeta* other) {
  short_url_.Swap(&other->short_url_);
  canonical_url_.Swap(&other->canonical_url_);
  std::swap(channel_, other->channel_);
  std::swap(repost_, other->repost_);
  std::swap(is_controlling_, other->is_controlling_);
  std::swap(take_over_height_, other->take_over_height_);
  std::swap(creation_height_, other->creation_height_);
  std::swap(activation_height_, other->activation_height_);
  std::swap(expiration_height_, other->expiration_height_);
  std::swap(claims_in_channel_, other->claims_in_channel_);
  std::swap(effective_amount_, other->effective_amount_);
  std::swap(reposted_, other->reposted_);
  std::swap(trending_group_, other->trending_group_);
  std::swap(support_amount_, other->support_amount_);
  std::swap(trending_mixed_, other->trending_mixed_);
  std::swap(trending_local_, other->trending_local_);
  std::swap(trending_global_, other->trending_global_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClaimMeta::GetMetadata() const {
  protobuf_result_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_result_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClaimMeta

// .pb.Output channel = 1;
bool ClaimMeta::has_channel() const {
  return this != internal_default_instance() && channel_ != NULL;
}
void ClaimMeta::clear_channel() {
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) delete channel_;
  channel_ = NULL;
}
const ::pb::Output& ClaimMeta::channel() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.channel)
  return channel_ != NULL ? *channel_
                         : *::pb::Output::internal_default_instance();
}
::pb::Output* ClaimMeta::mutable_channel() {
  
  if (channel_ == NULL) {
    channel_ = new ::pb::Output;
  }
  // @@protoc_insertion_point(field_mutable:pb.ClaimMeta.channel)
  return channel_;
}
::pb::Output* ClaimMeta::release_channel() {
  // @@protoc_insertion_point(field_release:pb.ClaimMeta.channel)
  
  ::pb::Output* temp = channel_;
  channel_ = NULL;
  return temp;
}
void ClaimMeta::set_allocated_channel(::pb::Output* channel) {
  delete channel_;
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ClaimMeta.channel)
}

// .pb.Output repost = 2;
bool ClaimMeta::has_repost() const {
  return this != internal_default_instance() && repost_ != NULL;
}
void ClaimMeta::clear_repost() {
  if (GetArenaNoVirtual() == NULL && repost_ != NULL) delete repost_;
  repost_ = NULL;
}
const ::pb::Output& ClaimMeta::repost() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.repost)
  return repost_ != NULL ? *repost_
                         : *::pb::Output::internal_default_instance();
}
::pb::Output* ClaimMeta::mutable_repost() {
  
  if (repost_ == NULL) {
    repost_ = new ::pb::Output;
  }
  // @@protoc_insertion_point(field_mutable:pb.ClaimMeta.repost)
  return repost_;
}
::pb::Output* ClaimMeta::release_repost() {
  // @@protoc_insertion_point(field_release:pb.ClaimMeta.repost)
  
  ::pb::Output* temp = repost_;
  repost_ = NULL;
  return temp;
}
void ClaimMeta::set_allocated_repost(::pb::Output* repost) {
  delete repost_;
  repost_ = repost;
  if (repost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ClaimMeta.repost)
}

// string short_url = 3;
void ClaimMeta::clear_short_url() {
  short_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClaimMeta::short_url() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.short_url)
  return short_url_.GetNoArena();
}
void ClaimMeta::set_short_url(const ::std::string& value) {
  
  short_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.short_url)
}
#if LANG_CXX11
void ClaimMeta::set_short_url(::std::string&& value) {
  
  short_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ClaimMeta.short_url)
}
#endif
void ClaimMeta::set_short_url(const char* value) {
  
  short_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ClaimMeta.short_url)
}
void ClaimMeta::set_short_url(const char* value, size_t size) {
  
  short_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ClaimMeta.short_url)
}
::std::string* ClaimMeta::mutable_short_url() {
  
  // @@protoc_insertion_point(field_mutable:pb.ClaimMeta.short_url)
  return short_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClaimMeta::release_short_url() {
  // @@protoc_insertion_point(field_release:pb.ClaimMeta.short_url)
  
  return short_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClaimMeta::set_allocated_short_url(::std::string* short_url) {
  if (short_url != NULL) {
    
  } else {
    
  }
  short_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_url);
  // @@protoc_insertion_point(field_set_allocated:pb.ClaimMeta.short_url)
}

// string canonical_url = 4;
void ClaimMeta::clear_canonical_url() {
  canonical_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClaimMeta::canonical_url() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.canonical_url)
  return canonical_url_.GetNoArena();
}
void ClaimMeta::set_canonical_url(const ::std::string& value) {
  
  canonical_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.canonical_url)
}
#if LANG_CXX11
void ClaimMeta::set_canonical_url(::std::string&& value) {
  
  canonical_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ClaimMeta.canonical_url)
}
#endif
void ClaimMeta::set_canonical_url(const char* value) {
  
  canonical_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ClaimMeta.canonical_url)
}
void ClaimMeta::set_canonical_url(const char* value, size_t size) {
  
  canonical_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ClaimMeta.canonical_url)
}
::std::string* ClaimMeta::mutable_canonical_url() {
  
  // @@protoc_insertion_point(field_mutable:pb.ClaimMeta.canonical_url)
  return canonical_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClaimMeta::release_canonical_url() {
  // @@protoc_insertion_point(field_release:pb.ClaimMeta.canonical_url)
  
  return canonical_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClaimMeta::set_allocated_canonical_url(::std::string* canonical_url) {
  if (canonical_url != NULL) {
    
  } else {
    
  }
  canonical_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonical_url);
  // @@protoc_insertion_point(field_set_allocated:pb.ClaimMeta.canonical_url)
}

// bool is_controlling = 5;
void ClaimMeta::clear_is_controlling() {
  is_controlling_ = false;
}
bool ClaimMeta::is_controlling() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.is_controlling)
  return is_controlling_;
}
void ClaimMeta::set_is_controlling(bool value) {
  
  is_controlling_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.is_controlling)
}

// uint32 take_over_height = 6;
void ClaimMeta::clear_take_over_height() {
  take_over_height_ = 0u;
}
::google::protobuf::uint32 ClaimMeta::take_over_height() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.take_over_height)
  return take_over_height_;
}
void ClaimMeta::set_take_over_height(::google::protobuf::uint32 value) {
  
  take_over_height_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.take_over_height)
}

// uint32 creation_height = 7;
void ClaimMeta::clear_creation_height() {
  creation_height_ = 0u;
}
::google::protobuf::uint32 ClaimMeta::creation_height() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.creation_height)
  return creation_height_;
}
void ClaimMeta::set_creation_height(::google::protobuf::uint32 value) {
  
  creation_height_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.creation_height)
}

// uint32 activation_height = 8;
void ClaimMeta::clear_activation_height() {
  activation_height_ = 0u;
}
::google::protobuf::uint32 ClaimMeta::activation_height() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.activation_height)
  return activation_height_;
}
void ClaimMeta::set_activation_height(::google::protobuf::uint32 value) {
  
  activation_height_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.activation_height)
}

// uint32 expiration_height = 9;
void ClaimMeta::clear_expiration_height() {
  expiration_height_ = 0u;
}
::google::protobuf::uint32 ClaimMeta::expiration_height() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.expiration_height)
  return expiration_height_;
}
void ClaimMeta::set_expiration_height(::google::protobuf::uint32 value) {
  
  expiration_height_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.expiration_height)
}

// uint32 claims_in_channel = 10;
void ClaimMeta::clear_claims_in_channel() {
  claims_in_channel_ = 0u;
}
::google::protobuf::uint32 ClaimMeta::claims_in_channel() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.claims_in_channel)
  return claims_in_channel_;
}
void ClaimMeta::set_claims_in_channel(::google::protobuf::uint32 value) {
  
  claims_in_channel_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.claims_in_channel)
}

// uint32 reposted = 11;
void ClaimMeta::clear_reposted() {
  reposted_ = 0u;
}
::google::protobuf::uint32 ClaimMeta::reposted() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.reposted)
  return reposted_;
}
void ClaimMeta::set_reposted(::google::protobuf::uint32 value) {
  
  reposted_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.reposted)
}

// uint64 effective_amount = 20;
void ClaimMeta::clear_effective_amount() {
  effective_amount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClaimMeta::effective_amount() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.effective_amount)
  return effective_amount_;
}
void ClaimMeta::set_effective_amount(::google::protobuf::uint64 value) {
  
  effective_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.effective_amount)
}

// uint64 support_amount = 21;
void ClaimMeta::clear_support_amount() {
  support_amount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClaimMeta::support_amount() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.support_amount)
  return support_amount_;
}
void ClaimMeta::set_support_amount(::google::protobuf::uint64 value) {
  
  support_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.support_amount)
}

// uint32 trending_group = 22;
void ClaimMeta::clear_trending_group() {
  trending_group_ = 0u;
}
::google::protobuf::uint32 ClaimMeta::trending_group() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.trending_group)
  return trending_group_;
}
void ClaimMeta::set_trending_group(::google::protobuf::uint32 value) {
  
  trending_group_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.trending_group)
}

// float trending_mixed = 23;
void ClaimMeta::clear_trending_mixed() {
  trending_mixed_ = 0;
}
float ClaimMeta::trending_mixed() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.trending_mixed)
  return trending_mixed_;
}
void ClaimMeta::set_trending_mixed(float value) {
  
  trending_mixed_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.trending_mixed)
}

// float trending_local = 24;
void ClaimMeta::clear_trending_local() {
  trending_local_ = 0;
}
float ClaimMeta::trending_local() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.trending_local)
  return trending_local_;
}
void ClaimMeta::set_trending_local(float value) {
  
  trending_local_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.trending_local)
}

// float trending_global = 25;
void ClaimMeta::clear_trending_global() {
  trending_global_ = 0;
}
float ClaimMeta::trending_global() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.trending_global)
  return trending_global_;
}
void ClaimMeta::set_trending_global(float value) {
  
  trending_global_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.trending_global)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kCodeFieldNumber;
const int Error::kTextFieldNumber;
const int Error::kBlockedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_result_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_blocked()) {
    blocked_ = new ::pb::Blocked(*from.blocked_);
  } else {
    blocked_ = NULL;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:pb.Error)
}

void Error::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&blocked_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&blocked_) + sizeof(code_));
  _cached_size_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:pb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete blocked_;
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_result_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_result_2eproto::file_level_metadata[3].descriptor;
}

const Error& Error::default_instance() {
  protobuf_result_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Error)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && blocked_ != NULL) {
    delete blocked_;
  }
  blocked_ = NULL;
  code_ = 0;
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Error.Code code = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::pb::Error_Code >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Error.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Blocked blocked = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blocked()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Error)
  // .pb.Error.Code code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Error.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // .pb.Blocked blocked = 3;
  if (this->has_blocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->blocked_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Error)
  // .pb.Error.Code code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Error.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // .pb.Blocked blocked = 3;
  if (this->has_blocked()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->blocked_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Error)
  size_t total_size = 0;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // .pb.Blocked blocked = 3;
  if (this->has_blocked()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->blocked_);
  }

  // .pb.Error.Code code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_blocked()) {
    mutable_blocked()->::pb::Blocked::MergeFrom(from.blocked());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  text_.Swap(&other->text_);
  std::swap(blocked_, other->blocked_);
  std::swap(code_, other->code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_result_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_result_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// .pb.Error.Code code = 1;
void Error::clear_code() {
  code_ = 0;
}
::pb::Error_Code Error::code() const {
  // @@protoc_insertion_point(field_get:pb.Error.code)
  return static_cast< ::pb::Error_Code >(code_);
}
void Error::set_code(::pb::Error_Code value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:pb.Error.code)
}

// string text = 2;
void Error::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error::text() const {
  // @@protoc_insertion_point(field_get:pb.Error.text)
  return text_.GetNoArena();
}
void Error::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Error.text)
}
#if LANG_CXX11
void Error::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Error.text)
}
#endif
void Error::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Error.text)
}
void Error::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Error.text)
}
::std::string* Error::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:pb.Error.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_text() {
  // @@protoc_insertion_point(field_release:pb.Error.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:pb.Error.text)
}

// .pb.Blocked blocked = 3;
bool Error::has_blocked() const {
  return this != internal_default_instance() && blocked_ != NULL;
}
void Error::clear_blocked() {
  if (GetArenaNoVirtual() == NULL && blocked_ != NULL) delete blocked_;
  blocked_ = NULL;
}
const ::pb::Blocked& Error::blocked() const {
  // @@protoc_insertion_point(field_get:pb.Error.blocked)
  return blocked_ != NULL ? *blocked_
                         : *::pb::Blocked::internal_default_instance();
}
::pb::Blocked* Error::mutable_blocked() {
  
  if (blocked_ == NULL) {
    blocked_ = new ::pb::Blocked;
  }
  // @@protoc_insertion_point(field_mutable:pb.Error.blocked)
  return blocked_;
}
::pb::Blocked* Error::release_blocked() {
  // @@protoc_insertion_point(field_release:pb.Error.blocked)
  
  ::pb::Blocked* temp = blocked_;
  blocked_ = NULL;
  return temp;
}
void Error::set_allocated_blocked(::pb::Blocked* blocked) {
  delete blocked_;
  blocked_ = blocked;
  if (blocked) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Error.blocked)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Blocked::kCountFieldNumber;
const int Blocked::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Blocked::Blocked()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_result_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Blocked)
}
Blocked::Blocked(const Blocked& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_channel()) {
    channel_ = new ::pb::Output(*from.channel_);
  } else {
    channel_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:pb.Blocked)
}

void Blocked::SharedCtor() {
  ::memset(&channel_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&channel_) + sizeof(count_));
  _cached_size_ = 0;
}

Blocked::~Blocked() {
  // @@protoc_insertion_point(destructor:pb.Blocked)
  SharedDtor();
}

void Blocked::SharedDtor() {
  if (this != internal_default_instance()) {
    delete channel_;
  }
}

void Blocked::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Blocked::descriptor() {
  protobuf_result_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_result_2eproto::file_level_metadata[4].descriptor;
}

const Blocked& Blocked::default_instance() {
  protobuf_result_2eproto::InitDefaults();
  return *internal_default_instance();
}

Blocked* Blocked::New(::google::protobuf::Arena* arena) const {
  Blocked* n = new Blocked;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Blocked::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Blocked)
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
  count_ = 0u;
}

bool Blocked::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Blocked)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 count = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Output channel = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Blocked)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Blocked)
  return false;
#undef DO_
}

void Blocked::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Blocked)
  // uint32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // .pb.Output channel = 2;
  if (this->has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->channel_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Blocked)
}

::google::protobuf::uint8* Blocked::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Blocked)
  // uint32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // .pb.Output channel = 2;
  if (this->has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->channel_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Blocked)
  return target;
}

size_t Blocked::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Blocked)
  size_t total_size = 0;

  // .pb.Output channel = 2;
  if (this->has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->channel_);
  }

  // uint32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Blocked::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Blocked)
  GOOGLE_DCHECK_NE(&from, this);
  const Blocked* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Blocked>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Blocked)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Blocked)
    MergeFrom(*source);
  }
}

void Blocked::MergeFrom(const Blocked& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Blocked)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_channel()) {
    mutable_channel()->::pb::Output::MergeFrom(from.channel());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void Blocked::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Blocked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Blocked::CopyFrom(const Blocked& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Blocked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Blocked::IsInitialized() const {
  return true;
}

void Blocked::Swap(Blocked* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Blocked::InternalSwap(Blocked* other) {
  std::swap(channel_, other->channel_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Blocked::GetMetadata() const {
  protobuf_result_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_result_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Blocked

// uint32 count = 1;
void Blocked::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 Blocked::count() const {
  // @@protoc_insertion_point(field_get:pb.Blocked.count)
  return count_;
}
void Blocked::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:pb.Blocked.count)
}

// .pb.Output channel = 2;
bool Blocked::has_channel() const {
  return this != internal_default_instance() && channel_ != NULL;
}
void Blocked::clear_channel() {
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) delete channel_;
  channel_ = NULL;
}
const ::pb::Output& Blocked::channel() const {
  // @@protoc_insertion_point(field_get:pb.Blocked.channel)
  return channel_ != NULL ? *channel_
                         : *::pb::Output::internal_default_instance();
}
::pb::Output* Blocked::mutable_channel() {
  
  if (channel_ == NULL) {
    channel_ = new ::pb::Output;
  }
  // @@protoc_insertion_point(field_mutable:pb.Blocked.channel)
  return channel_;
}
::pb::Output* Blocked::release_channel() {
  // @@protoc_insertion_point(field_release:pb.Blocked.channel)
  
  ::pb::Output* temp = channel_;
  channel_ = NULL;
  return temp;
}
void Blocked::set_allocated_channel(::pb::Output* channel) {
  delete channel_;
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Blocked.channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
