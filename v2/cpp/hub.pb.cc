// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hub.proto

#include "hub.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pb {
constexpr InvertibleField::InvertibleField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_()
  , invert_(false){}
struct InvertibleFieldDefaultTypeInternal {
  constexpr InvertibleFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvertibleFieldDefaultTypeInternal() {}
  union {
    InvertibleField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvertibleFieldDefaultTypeInternal _InvertibleField_default_instance_;
constexpr BoolValue::BoolValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct BoolValueDefaultTypeInternal {
  constexpr BoolValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoolValueDefaultTypeInternal() {}
  union {
    BoolValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoolValueDefaultTypeInternal _BoolValue_default_instance_;
constexpr UInt32Value::UInt32Value(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u){}
struct UInt32ValueDefaultTypeInternal {
  constexpr UInt32ValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UInt32ValueDefaultTypeInternal() {}
  union {
    UInt32Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UInt32ValueDefaultTypeInternal _UInt32Value_default_instance_;
constexpr RangeField::RangeField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_()
  , op_(0)
{}
struct RangeFieldDefaultTypeInternal {
  constexpr RangeFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeFieldDefaultTypeInternal() {}
  union {
    RangeField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeFieldDefaultTypeInternal _RangeField_default_instance_;
constexpr SearchRequest::SearchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_by_()
  , claim_type_()
  , stream_type_()
  , media_type_()
  , any_tags_()
  , all_tags_()
  , not_tags_()
  , any_languages_()
  , all_languages_()
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_take_over_height_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , normalized_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , short_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , canonical_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , author_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fee_currency_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reposted_claim_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , claims_in_channel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tx_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_digest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , claim_id_(nullptr)
  , channel_id_(nullptr)
  , tx_position_(nullptr)
  , amount_(nullptr)
  , timestamp_(nullptr)
  , creation_timestamp_(nullptr)
  , height_(nullptr)
  , creation_height_(nullptr)
  , activation_height_(nullptr)
  , expiration_height_(nullptr)
  , release_time_(nullptr)
  , repost_count_(nullptr)
  , fee_amount_(nullptr)
  , duration_(nullptr)
  , censor_type_(nullptr)
  , channel_join_(nullptr)
  , is_signature_valid_(nullptr)
  , effective_amount_(nullptr)
  , support_amount_(nullptr)
  , trending_score_(nullptr)
  , tx_nout_(nullptr)
  , has_source_(nullptr)
  , limit_(0u)
  , offset_(0u)
  , is_controlling_(false)
  , has_channel_signature_(false)
  , remove_duplicates_(false)
  , no_totals_(false)
  , limit_claims_per_channel_(0u){}
struct SearchRequestDefaultTypeInternal {
  constexpr SearchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SearchRequestDefaultTypeInternal() {}
  union {
    SearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
}  // namespace pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hub_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_hub_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hub_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hub_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::InvertibleField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::InvertibleField, invert_),
  PROTOBUF_FIELD_OFFSET(::pb::InvertibleField, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BoolValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BoolValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::UInt32Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::UInt32Value, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RangeField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RangeField, op_),
  PROTOBUF_FIELD_OFFSET(::pb::RangeField, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, claim_id_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, text_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, order_by_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, is_controlling_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, last_take_over_height_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, name_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, normalized_name_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, tx_position_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, amount_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, timestamp_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, creation_timestamp_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, height_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, creation_height_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, activation_height_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, expiration_height_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, release_time_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, short_url_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, canonical_url_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, title_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, author_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, description_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, claim_type_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, repost_count_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, stream_type_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, media_type_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, fee_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, fee_currency_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, duration_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, reposted_claim_id_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, censor_type_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, claims_in_channel_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, channel_join_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, is_signature_valid_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, effective_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, support_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, trending_score_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, tx_id_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, tx_nout_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, signature_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, signature_digest_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, public_key_bytes_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, public_key_id_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, any_tags_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, all_tags_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, not_tags_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, has_channel_signature_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, has_source_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, limit_claims_per_channel_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, any_languages_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, all_languages_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, remove_duplicates_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, no_totals_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::InvertibleField)},
  { 7, -1, sizeof(::pb::BoolValue)},
  { 13, -1, sizeof(::pb::UInt32Value)},
  { 19, -1, sizeof(::pb::RangeField)},
  { 26, -1, sizeof(::pb::SearchRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_InvertibleField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BoolValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_UInt32Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RangeField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SearchRequest_default_instance_),
};

const char descriptor_table_protodef_hub_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\thub.proto\022\002pb\032\014result.proto\"0\n\017Inverti"
  "bleField\022\016\n\006invert\030\001 \001(\010\022\r\n\005value\030\002 \003(\t\""
  "\032\n\tBoolValue\022\r\n\005value\030\001 \001(\010\"\034\n\013UInt32Val"
  "ue\022\r\n\005value\030\001 \001(\r\"j\n\nRangeField\022\035\n\002op\030\001 "
  "\001(\0162\021.pb.RangeField.Op\022\r\n\005value\030\002 \003(\t\".\n"
  "\002Op\022\006\n\002EQ\020\000\022\007\n\003LTE\020\001\022\007\n\003GTE\020\002\022\006\n\002LT\020\003\022\006\n"
  "\002GT\020\004\"\235\014\n\rSearchRequest\022%\n\010claim_id\030\001 \001("
  "\0132\023.pb.InvertibleField\022\'\n\nchannel_id\030\002 \001"
  "(\0132\023.pb.InvertibleField\022\014\n\004text\030\003 \001(\t\022\r\n"
  "\005limit\030\004 \001(\r\022\020\n\010order_by\030\005 \003(\t\022\016\n\006offset"
  "\030\006 \001(\r\022\026\n\016is_controlling\030\007 \001(\010\022\035\n\025last_t"
  "ake_over_height\030\010 \001(\t\022\014\n\004name\030\t \001(\t\022\027\n\017n"
  "ormalized_name\030\n \001(\t\022#\n\013tx_position\030\013 \001("
  "\0132\016.pb.RangeField\022\036\n\006amount\030\014 \001(\0132\016.pb.R"
  "angeField\022!\n\ttimestamp\030\r \001(\0132\016.pb.RangeF"
  "ield\022*\n\022creation_timestamp\030\016 \001(\0132\016.pb.Ra"
  "ngeField\022\036\n\006height\030\017 \001(\0132\016.pb.RangeField"
  "\022\'\n\017creation_height\030\020 \001(\0132\016.pb.RangeFiel"
  "d\022)\n\021activation_height\030\021 \001(\0132\016.pb.RangeF"
  "ield\022)\n\021expiration_height\030\022 \001(\0132\016.pb.Ran"
  "geField\022$\n\014release_time\030\023 \001(\0132\016.pb.Range"
  "Field\022\021\n\tshort_url\030\024 \001(\t\022\025\n\rcanonical_ur"
  "l\030\025 \001(\t\022\r\n\005title\030\026 \001(\t\022\016\n\006author\030\027 \001(\t\022\023"
  "\n\013description\030\030 \001(\t\022\022\n\nclaim_type\030\031 \003(\t\022"
  "$\n\014repost_count\030\032 \001(\0132\016.pb.RangeField\022\023\n"
  "\013stream_type\030\033 \003(\t\022\022\n\nmedia_type\030\034 \003(\t\022\""
  "\n\nfee_amount\030\035 \001(\0132\016.pb.RangeField\022\024\n\014fe"
  "e_currency\030\036 \001(\t\022 \n\010duration\030\037 \001(\0132\016.pb."
  "RangeField\022\031\n\021reposted_claim_id\030  \001(\t\022#\n"
  "\013censor_type\030! \001(\0132\016.pb.RangeField\022\031\n\021cl"
  "aims_in_channel\030\" \001(\t\022$\n\014channel_join\030# "
  "\001(\0132\016.pb.RangeField\022)\n\022is_signature_vali"
  "d\030$ \001(\0132\r.pb.BoolValue\022(\n\020effective_amou"
  "nt\030% \001(\0132\016.pb.RangeField\022&\n\016support_amou"
  "nt\030& \001(\0132\016.pb.RangeField\022&\n\016trending_sco"
  "re\030\' \001(\0132\016.pb.RangeField\022\r\n\005tx_id\030+ \001(\t\022"
  " \n\007tx_nout\030, \001(\0132\017.pb.UInt32Value\022\021\n\tsig"
  "nature\030- \001(\t\022\030\n\020signature_digest\030. \001(\t\022\030"
  "\n\020public_key_bytes\030/ \001(\t\022\025\n\rpublic_key_i"
  "d\0300 \001(\t\022\020\n\010any_tags\0301 \003(\t\022\020\n\010all_tags\0302 "
  "\003(\t\022\020\n\010not_tags\0303 \003(\t\022\035\n\025has_channel_sig"
  "nature\0304 \001(\010\022!\n\nhas_source\0305 \001(\0132\r.pb.Bo"
  "olValue\022 \n\030limit_claims_per_channel\0306 \001("
  "\r\022\025\n\rany_languages\0307 \003(\t\022\025\n\rall_language"
  "s\0308 \003(\t\022\031\n\021remove_duplicates\0309 \001(\010\022\021\n\tno"
  "_totals\030: \001(\01021\n\003Hub\022*\n\006Search\022\021.pb.Sear"
  "chRequest\032\013.pb.Outputs\"\000B\037Z\035github.com/l"
  "bryio/types/go/pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hub_2eproto_deps[1] = {
  &::descriptor_table_result_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hub_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hub_2eproto = {
  false, false, 1905, descriptor_table_protodef_hub_2eproto, "hub.proto", 
  &descriptor_table_hub_2eproto_once, descriptor_table_hub_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_hub_2eproto::offsets,
  file_level_metadata_hub_2eproto, file_level_enum_descriptors_hub_2eproto, file_level_service_descriptors_hub_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_hub_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hub_2eproto);
  return descriptor_table_hub_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_hub_2eproto(&descriptor_table_hub_2eproto);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RangeField_Op_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hub_2eproto);
  return file_level_enum_descriptors_hub_2eproto[0];
}
bool RangeField_Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RangeField_Op RangeField::EQ;
constexpr RangeField_Op RangeField::LTE;
constexpr RangeField_Op RangeField::GTE;
constexpr RangeField_Op RangeField::LT;
constexpr RangeField_Op RangeField::GT;
constexpr RangeField_Op RangeField::Op_MIN;
constexpr RangeField_Op RangeField::Op_MAX;
constexpr int RangeField::Op_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class InvertibleField::_Internal {
 public:
};

InvertibleField::InvertibleField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.InvertibleField)
}
InvertibleField::InvertibleField(const InvertibleField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invert_ = from.invert_;
  // @@protoc_insertion_point(copy_constructor:pb.InvertibleField)
}

void InvertibleField::SharedCtor() {
invert_ = false;
}

InvertibleField::~InvertibleField() {
  // @@protoc_insertion_point(destructor:pb.InvertibleField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InvertibleField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InvertibleField::ArenaDtor(void* object) {
  InvertibleField* _this = reinterpret_cast< InvertibleField* >(object);
  (void)_this;
}
void InvertibleField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvertibleField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvertibleField::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.InvertibleField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  invert_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvertibleField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool invert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          invert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.InvertibleField.value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvertibleField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.InvertibleField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool invert = 1;
  if (this->invert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_invert(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.InvertibleField.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.InvertibleField)
  return target;
}

size_t InvertibleField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.InvertibleField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  // bool invert = 1;
  if (this->invert() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvertibleField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.InvertibleField)
  GOOGLE_DCHECK_NE(&from, this);
  const InvertibleField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvertibleField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.InvertibleField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.InvertibleField)
    MergeFrom(*source);
  }
}

void InvertibleField::MergeFrom(const InvertibleField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.InvertibleField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from.invert() != 0) {
    _internal_set_invert(from._internal_invert());
  }
}

void InvertibleField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.InvertibleField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvertibleField::CopyFrom(const InvertibleField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.InvertibleField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvertibleField::IsInitialized() const {
  return true;
}

void InvertibleField::InternalSwap(InvertibleField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  swap(invert_, other->invert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvertibleField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BoolValue::_Internal {
 public:
};

BoolValue::BoolValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.BoolValue)
}
BoolValue::BoolValue(const BoolValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:pb.BoolValue)
}

void BoolValue::SharedCtor() {
value_ = false;
}

BoolValue::~BoolValue() {
  // @@protoc_insertion_point(destructor:pb.BoolValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoolValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoolValue::ArenaDtor(void* object) {
  BoolValue* _this = reinterpret_cast< BoolValue* >(object);
  (void)_this;
}
void BoolValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoolValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoolValue::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BoolValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoolValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoolValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BoolValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BoolValue)
  return target;
}

size_t BoolValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BoolValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BoolValue)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoolValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BoolValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BoolValue)
    MergeFrom(*source);
  }
}

void BoolValue::MergeFrom(const BoolValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BoolValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void BoolValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BoolValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolValue::CopyFrom(const BoolValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BoolValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolValue::IsInitialized() const {
  return true;
}

void BoolValue::InternalSwap(BoolValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UInt32Value::_Internal {
 public:
};

UInt32Value::UInt32Value(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.UInt32Value)
}
UInt32Value::UInt32Value(const UInt32Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:pb.UInt32Value)
}

void UInt32Value::SharedCtor() {
value_ = 0u;
}

UInt32Value::~UInt32Value() {
  // @@protoc_insertion_point(destructor:pb.UInt32Value)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UInt32Value::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UInt32Value::ArenaDtor(void* object) {
  UInt32Value* _this = reinterpret_cast< UInt32Value* >(object);
  (void)_this;
}
void UInt32Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UInt32Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UInt32Value::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.UInt32Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UInt32Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UInt32Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.UInt32Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.UInt32Value)
  return target;
}

size_t UInt32Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.UInt32Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UInt32Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.UInt32Value)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt32Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UInt32Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.UInt32Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.UInt32Value)
    MergeFrom(*source);
  }
}

void UInt32Value::MergeFrom(const UInt32Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.UInt32Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void UInt32Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.UInt32Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt32Value::CopyFrom(const UInt32Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.UInt32Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt32Value::IsInitialized() const {
  return true;
}

void UInt32Value::InternalSwap(UInt32Value* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UInt32Value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RangeField::_Internal {
 public:
};

RangeField::RangeField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.RangeField)
}
RangeField::RangeField(const RangeField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:pb.RangeField)
}

void RangeField::SharedCtor() {
op_ = 0;
}

RangeField::~RangeField() {
  // @@protoc_insertion_point(destructor:pb.RangeField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RangeField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RangeField::ArenaDtor(void* object) {
  RangeField* _this = reinterpret_cast< RangeField* >(object);
  (void)_this;
}
void RangeField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangeField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RangeField::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RangeField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.RangeField.Op op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::pb::RangeField_Op>(val));
        } else goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.RangeField.value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RangeField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.RangeField.Op op = 1;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.RangeField.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RangeField)
  return target;
}

size_t RangeField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RangeField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  // .pb.RangeField.Op op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RangeField)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangeField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RangeField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RangeField)
    MergeFrom(*source);
  }
}

void RangeField::MergeFrom(const RangeField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RangeField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void RangeField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RangeField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeField::CopyFrom(const RangeField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RangeField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeField::IsInitialized() const {
  return true;
}

void RangeField::InternalSwap(RangeField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SearchRequest::_Internal {
 public:
  static const ::pb::InvertibleField& claim_id(const SearchRequest* msg);
  static const ::pb::InvertibleField& channel_id(const SearchRequest* msg);
  static const ::pb::RangeField& tx_position(const SearchRequest* msg);
  static const ::pb::RangeField& amount(const SearchRequest* msg);
  static const ::pb::RangeField& timestamp(const SearchRequest* msg);
  static const ::pb::RangeField& creation_timestamp(const SearchRequest* msg);
  static const ::pb::RangeField& height(const SearchRequest* msg);
  static const ::pb::RangeField& creation_height(const SearchRequest* msg);
  static const ::pb::RangeField& activation_height(const SearchRequest* msg);
  static const ::pb::RangeField& expiration_height(const SearchRequest* msg);
  static const ::pb::RangeField& release_time(const SearchRequest* msg);
  static const ::pb::RangeField& repost_count(const SearchRequest* msg);
  static const ::pb::RangeField& fee_amount(const SearchRequest* msg);
  static const ::pb::RangeField& duration(const SearchRequest* msg);
  static const ::pb::RangeField& censor_type(const SearchRequest* msg);
  static const ::pb::RangeField& channel_join(const SearchRequest* msg);
  static const ::pb::BoolValue& is_signature_valid(const SearchRequest* msg);
  static const ::pb::RangeField& effective_amount(const SearchRequest* msg);
  static const ::pb::RangeField& support_amount(const SearchRequest* msg);
  static const ::pb::RangeField& trending_score(const SearchRequest* msg);
  static const ::pb::UInt32Value& tx_nout(const SearchRequest* msg);
  static const ::pb::BoolValue& has_source(const SearchRequest* msg);
};

const ::pb::InvertibleField&
SearchRequest::_Internal::claim_id(const SearchRequest* msg) {
  return *msg->claim_id_;
}
const ::pb::InvertibleField&
SearchRequest::_Internal::channel_id(const SearchRequest* msg) {
  return *msg->channel_id_;
}
const ::pb::RangeField&
SearchRequest::_Internal::tx_position(const SearchRequest* msg) {
  return *msg->tx_position_;
}
const ::pb::RangeField&
SearchRequest::_Internal::amount(const SearchRequest* msg) {
  return *msg->amount_;
}
const ::pb::RangeField&
SearchRequest::_Internal::timestamp(const SearchRequest* msg) {
  return *msg->timestamp_;
}
const ::pb::RangeField&
SearchRequest::_Internal::creation_timestamp(const SearchRequest* msg) {
  return *msg->creation_timestamp_;
}
const ::pb::RangeField&
SearchRequest::_Internal::height(const SearchRequest* msg) {
  return *msg->height_;
}
const ::pb::RangeField&
SearchRequest::_Internal::creation_height(const SearchRequest* msg) {
  return *msg->creation_height_;
}
const ::pb::RangeField&
SearchRequest::_Internal::activation_height(const SearchRequest* msg) {
  return *msg->activation_height_;
}
const ::pb::RangeField&
SearchRequest::_Internal::expiration_height(const SearchRequest* msg) {
  return *msg->expiration_height_;
}
const ::pb::RangeField&
SearchRequest::_Internal::release_time(const SearchRequest* msg) {
  return *msg->release_time_;
}
const ::pb::RangeField&
SearchRequest::_Internal::repost_count(const SearchRequest* msg) {
  return *msg->repost_count_;
}
const ::pb::RangeField&
SearchRequest::_Internal::fee_amount(const SearchRequest* msg) {
  return *msg->fee_amount_;
}
const ::pb::RangeField&
SearchRequest::_Internal::duration(const SearchRequest* msg) {
  return *msg->duration_;
}
const ::pb::RangeField&
SearchRequest::_Internal::censor_type(const SearchRequest* msg) {
  return *msg->censor_type_;
}
const ::pb::RangeField&
SearchRequest::_Internal::channel_join(const SearchRequest* msg) {
  return *msg->channel_join_;
}
const ::pb::BoolValue&
SearchRequest::_Internal::is_signature_valid(const SearchRequest* msg) {
  return *msg->is_signature_valid_;
}
const ::pb::RangeField&
SearchRequest::_Internal::effective_amount(const SearchRequest* msg) {
  return *msg->effective_amount_;
}
const ::pb::RangeField&
SearchRequest::_Internal::support_amount(const SearchRequest* msg) {
  return *msg->support_amount_;
}
const ::pb::RangeField&
SearchRequest::_Internal::trending_score(const SearchRequest* msg) {
  return *msg->trending_score_;
}
const ::pb::UInt32Value&
SearchRequest::_Internal::tx_nout(const SearchRequest* msg) {
  return *msg->tx_nout_;
}
const ::pb::BoolValue&
SearchRequest::_Internal::has_source(const SearchRequest* msg) {
  return *msg->has_source_;
}
SearchRequest::SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  order_by_(arena),
  claim_type_(arena),
  stream_type_(arena),
  media_type_(arena),
  any_tags_(arena),
  all_tags_(arena),
  not_tags_(arena),
  any_languages_(arena),
  all_languages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      order_by_(from.order_by_),
      claim_type_(from.claim_type_),
      stream_type_(from.stream_type_),
      media_type_(from.media_type_),
      any_tags_(from.any_tags_),
      all_tags_(from.all_tags_),
      not_tags_(from.not_tags_),
      any_languages_(from.any_languages_),
      all_languages_(from.all_languages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  last_take_over_height_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_take_over_height().empty()) {
    last_take_over_height_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_take_over_height(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  normalized_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_normalized_name().empty()) {
    normalized_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_normalized_name(), 
      GetArena());
  }
  short_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_short_url().empty()) {
    short_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_short_url(), 
      GetArena());
  }
  canonical_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_canonical_url().empty()) {
    canonical_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_canonical_url(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_author().empty()) {
    author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_author(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  fee_currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fee_currency().empty()) {
    fee_currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fee_currency(), 
      GetArena());
  }
  reposted_claim_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reposted_claim_id().empty()) {
    reposted_claim_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reposted_claim_id(), 
      GetArena());
  }
  claims_in_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_claims_in_channel().empty()) {
    claims_in_channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_claims_in_channel(), 
      GetArena());
  }
  tx_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_id().empty()) {
    tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx_id(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  signature_digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature_digest().empty()) {
    signature_digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature_digest(), 
      GetArena());
  }
  public_key_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key_bytes().empty()) {
    public_key_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key_bytes(), 
      GetArena());
  }
  public_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key_id().empty()) {
    public_key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key_id(), 
      GetArena());
  }
  if (from._internal_has_claim_id()) {
    claim_id_ = new ::pb::InvertibleField(*from.claim_id_);
  } else {
    claim_id_ = nullptr;
  }
  if (from._internal_has_channel_id()) {
    channel_id_ = new ::pb::InvertibleField(*from.channel_id_);
  } else {
    channel_id_ = nullptr;
  }
  if (from._internal_has_tx_position()) {
    tx_position_ = new ::pb::RangeField(*from.tx_position_);
  } else {
    tx_position_ = nullptr;
  }
  if (from._internal_has_amount()) {
    amount_ = new ::pb::RangeField(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::pb::RangeField(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_creation_timestamp()) {
    creation_timestamp_ = new ::pb::RangeField(*from.creation_timestamp_);
  } else {
    creation_timestamp_ = nullptr;
  }
  if (from._internal_has_height()) {
    height_ = new ::pb::RangeField(*from.height_);
  } else {
    height_ = nullptr;
  }
  if (from._internal_has_creation_height()) {
    creation_height_ = new ::pb::RangeField(*from.creation_height_);
  } else {
    creation_height_ = nullptr;
  }
  if (from._internal_has_activation_height()) {
    activation_height_ = new ::pb::RangeField(*from.activation_height_);
  } else {
    activation_height_ = nullptr;
  }
  if (from._internal_has_expiration_height()) {
    expiration_height_ = new ::pb::RangeField(*from.expiration_height_);
  } else {
    expiration_height_ = nullptr;
  }
  if (from._internal_has_release_time()) {
    release_time_ = new ::pb::RangeField(*from.release_time_);
  } else {
    release_time_ = nullptr;
  }
  if (from._internal_has_repost_count()) {
    repost_count_ = new ::pb::RangeField(*from.repost_count_);
  } else {
    repost_count_ = nullptr;
  }
  if (from._internal_has_fee_amount()) {
    fee_amount_ = new ::pb::RangeField(*from.fee_amount_);
  } else {
    fee_amount_ = nullptr;
  }
  if (from._internal_has_duration()) {
    duration_ = new ::pb::RangeField(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from._internal_has_censor_type()) {
    censor_type_ = new ::pb::RangeField(*from.censor_type_);
  } else {
    censor_type_ = nullptr;
  }
  if (from._internal_has_channel_join()) {
    channel_join_ = new ::pb::RangeField(*from.channel_join_);
  } else {
    channel_join_ = nullptr;
  }
  if (from._internal_has_is_signature_valid()) {
    is_signature_valid_ = new ::pb::BoolValue(*from.is_signature_valid_);
  } else {
    is_signature_valid_ = nullptr;
  }
  if (from._internal_has_effective_amount()) {
    effective_amount_ = new ::pb::RangeField(*from.effective_amount_);
  } else {
    effective_amount_ = nullptr;
  }
  if (from._internal_has_support_amount()) {
    support_amount_ = new ::pb::RangeField(*from.support_amount_);
  } else {
    support_amount_ = nullptr;
  }
  if (from._internal_has_trending_score()) {
    trending_score_ = new ::pb::RangeField(*from.trending_score_);
  } else {
    trending_score_ = nullptr;
  }
  if (from._internal_has_tx_nout()) {
    tx_nout_ = new ::pb::UInt32Value(*from.tx_nout_);
  } else {
    tx_nout_ = nullptr;
  }
  if (from._internal_has_has_source()) {
    has_source_ = new ::pb::BoolValue(*from.has_source_);
  } else {
    has_source_ = nullptr;
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_claims_per_channel_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(limit_claims_per_channel_));
  // @@protoc_insertion_point(copy_constructor:pb.SearchRequest)
}

void SearchRequest::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
last_take_over_height_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
normalized_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
short_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
canonical_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fee_currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reposted_claim_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
claims_in_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tx_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
public_key_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
public_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&claim_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_claims_per_channel_) -
    reinterpret_cast<char*>(&claim_id_)) + sizeof(limit_claims_per_channel_));
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:pb.SearchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_take_over_height_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  normalized_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  canonical_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reposted_claim_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  claims_in_channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete claim_id_;
  if (this != internal_default_instance()) delete channel_id_;
  if (this != internal_default_instance()) delete tx_position_;
  if (this != internal_default_instance()) delete amount_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete creation_timestamp_;
  if (this != internal_default_instance()) delete height_;
  if (this != internal_default_instance()) delete creation_height_;
  if (this != internal_default_instance()) delete activation_height_;
  if (this != internal_default_instance()) delete expiration_height_;
  if (this != internal_default_instance()) delete release_time_;
  if (this != internal_default_instance()) delete repost_count_;
  if (this != internal_default_instance()) delete fee_amount_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete censor_type_;
  if (this != internal_default_instance()) delete channel_join_;
  if (this != internal_default_instance()) delete is_signature_valid_;
  if (this != internal_default_instance()) delete effective_amount_;
  if (this != internal_default_instance()) delete support_amount_;
  if (this != internal_default_instance()) delete trending_score_;
  if (this != internal_default_instance()) delete tx_nout_;
  if (this != internal_default_instance()) delete has_source_;
}

void SearchRequest::ArenaDtor(void* object) {
  SearchRequest* _this = reinterpret_cast< SearchRequest* >(object);
  (void)_this;
}
void SearchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_by_.Clear();
  claim_type_.Clear();
  stream_type_.Clear();
  media_type_.Clear();
  any_tags_.Clear();
  all_tags_.Clear();
  not_tags_.Clear();
  any_languages_.Clear();
  all_languages_.Clear();
  text_.ClearToEmpty();
  last_take_over_height_.ClearToEmpty();
  name_.ClearToEmpty();
  normalized_name_.ClearToEmpty();
  short_url_.ClearToEmpty();
  canonical_url_.ClearToEmpty();
  title_.ClearToEmpty();
  author_.ClearToEmpty();
  description_.ClearToEmpty();
  fee_currency_.ClearToEmpty();
  reposted_claim_id_.ClearToEmpty();
  claims_in_channel_.ClearToEmpty();
  tx_id_.ClearToEmpty();
  signature_.ClearToEmpty();
  signature_digest_.ClearToEmpty();
  public_key_bytes_.ClearToEmpty();
  public_key_id_.ClearToEmpty();
  if (GetArena() == nullptr && claim_id_ != nullptr) {
    delete claim_id_;
  }
  claim_id_ = nullptr;
  if (GetArena() == nullptr && channel_id_ != nullptr) {
    delete channel_id_;
  }
  channel_id_ = nullptr;
  if (GetArena() == nullptr && tx_position_ != nullptr) {
    delete tx_position_;
  }
  tx_position_ = nullptr;
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArena() == nullptr && creation_timestamp_ != nullptr) {
    delete creation_timestamp_;
  }
  creation_timestamp_ = nullptr;
  if (GetArena() == nullptr && height_ != nullptr) {
    delete height_;
  }
  height_ = nullptr;
  if (GetArena() == nullptr && creation_height_ != nullptr) {
    delete creation_height_;
  }
  creation_height_ = nullptr;
  if (GetArena() == nullptr && activation_height_ != nullptr) {
    delete activation_height_;
  }
  activation_height_ = nullptr;
  if (GetArena() == nullptr && expiration_height_ != nullptr) {
    delete expiration_height_;
  }
  expiration_height_ = nullptr;
  if (GetArena() == nullptr && release_time_ != nullptr) {
    delete release_time_;
  }
  release_time_ = nullptr;
  if (GetArena() == nullptr && repost_count_ != nullptr) {
    delete repost_count_;
  }
  repost_count_ = nullptr;
  if (GetArena() == nullptr && fee_amount_ != nullptr) {
    delete fee_amount_;
  }
  fee_amount_ = nullptr;
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  if (GetArena() == nullptr && censor_type_ != nullptr) {
    delete censor_type_;
  }
  censor_type_ = nullptr;
  if (GetArena() == nullptr && channel_join_ != nullptr) {
    delete channel_join_;
  }
  channel_join_ = nullptr;
  if (GetArena() == nullptr && is_signature_valid_ != nullptr) {
    delete is_signature_valid_;
  }
  is_signature_valid_ = nullptr;
  if (GetArena() == nullptr && effective_amount_ != nullptr) {
    delete effective_amount_;
  }
  effective_amount_ = nullptr;
  if (GetArena() == nullptr && support_amount_ != nullptr) {
    delete support_amount_;
  }
  support_amount_ = nullptr;
  if (GetArena() == nullptr && trending_score_ != nullptr) {
    delete trending_score_;
  }
  trending_score_ = nullptr;
  if (GetArena() == nullptr && tx_nout_ != nullptr) {
    delete tx_nout_;
  }
  tx_nout_ = nullptr;
  if (GetArena() == nullptr && has_source_ != nullptr) {
    delete has_source_;
  }
  has_source_ = nullptr;
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_claims_per_channel_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(limit_claims_per_channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.InvertibleField claim_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_claim_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.InvertibleField channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string order_by = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_order_by();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.order_by"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_controlling = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_controlling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_take_over_height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_last_take_over_height();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.last_take_over_height"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string normalized_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_normalized_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.normalized_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField tx_position = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField amount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField timestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField creation_timestamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField height = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_height(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField creation_height = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_height(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField activation_height = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_height(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField expiration_height = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration_height(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField release_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string short_url = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_short_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.short_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string canonical_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_canonical_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.canonical_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string author = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_author();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.author"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string claim_type = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_claim_type();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.claim_type"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // .pb.RangeField repost_count = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_repost_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string stream_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_stream_type();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.stream_type"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string media_type = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_media_type();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.media_type"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // .pb.RangeField fee_amount = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fee_currency = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_fee_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.fee_currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField duration = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reposted_claim_id = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_reposted_claim_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.reposted_claim_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField censor_type = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_censor_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string claims_in_channel = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_claims_in_channel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.claims_in_channel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField channel_join = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_join(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.BoolValue is_signature_valid = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_signature_valid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField effective_amount = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_effective_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField support_amount = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_support_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RangeField trending_score = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_trending_score(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tx_id = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_tx_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.tx_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.UInt32Value tx_nout = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx_nout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signature = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signature_digest = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_signature_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.signature_digest"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key_bytes = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_public_key_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.public_key_bytes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key_id = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_public_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.public_key_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string any_tags = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_any_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.any_tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<394>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string all_tags = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_all_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.all_tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string not_tags = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_not_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.not_tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<410>(ptr));
        } else goto handle_unusual;
        continue;
      // bool has_channel_signature = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          has_channel_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.BoolValue has_source = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_has_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit_claims_per_channel = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          limit_claims_per_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string any_languages = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_any_languages();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.any_languages"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<442>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string all_languages = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_all_languages();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SearchRequest.all_languages"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<450>(ptr));
        } else goto handle_unusual;
        continue;
      // bool remove_duplicates = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          remove_duplicates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_totals = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          no_totals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.InvertibleField claim_id = 1;
  if (this->has_claim_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::claim_id(this), target, stream);
  }

  // .pb.InvertibleField channel_id = 2;
  if (this->has_channel_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_id(this), target, stream);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  // uint32 limit = 4;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_limit(), target);
  }

  // repeated string order_by = 5;
  for (int i = 0, n = this->_internal_order_by_size(); i < n; i++) {
    const auto& s = this->_internal_order_by(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.order_by");
    target = stream->WriteString(5, s, target);
  }

  // uint32 offset = 6;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_offset(), target);
  }

  // bool is_controlling = 7;
  if (this->is_controlling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_controlling(), target);
  }

  // string last_take_over_height = 8;
  if (this->last_take_over_height().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_take_over_height().data(), static_cast<int>(this->_internal_last_take_over_height().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.last_take_over_height");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_last_take_over_height(), target);
  }

  // string name = 9;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_name(), target);
  }

  // string normalized_name = 10;
  if (this->normalized_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_normalized_name().data(), static_cast<int>(this->_internal_normalized_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.normalized_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_normalized_name(), target);
  }

  // .pb.RangeField tx_position = 11;
  if (this->has_tx_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tx_position(this), target, stream);
  }

  // .pb.RangeField amount = 12;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::amount(this), target, stream);
  }

  // .pb.RangeField timestamp = 13;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::timestamp(this), target, stream);
  }

  // .pb.RangeField creation_timestamp = 14;
  if (this->has_creation_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::creation_timestamp(this), target, stream);
  }

  // .pb.RangeField height = 15;
  if (this->has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::height(this), target, stream);
  }

  // .pb.RangeField creation_height = 16;
  if (this->has_creation_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::creation_height(this), target, stream);
  }

  // .pb.RangeField activation_height = 17;
  if (this->has_activation_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::activation_height(this), target, stream);
  }

  // .pb.RangeField expiration_height = 18;
  if (this->has_expiration_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::expiration_height(this), target, stream);
  }

  // .pb.RangeField release_time = 19;
  if (this->has_release_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::release_time(this), target, stream);
  }

  // string short_url = 20;
  if (this->short_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_short_url().data(), static_cast<int>(this->_internal_short_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.short_url");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_short_url(), target);
  }

  // string canonical_url = 21;
  if (this->canonical_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_canonical_url().data(), static_cast<int>(this->_internal_canonical_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.canonical_url");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_canonical_url(), target);
  }

  // string title = 22;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.title");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_title(), target);
  }

  // string author = 23;
  if (this->author().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author().data(), static_cast<int>(this->_internal_author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.author");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_author(), target);
  }

  // string description = 24;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.description");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_description(), target);
  }

  // repeated string claim_type = 25;
  for (int i = 0, n = this->_internal_claim_type_size(); i < n; i++) {
    const auto& s = this->_internal_claim_type(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.claim_type");
    target = stream->WriteString(25, s, target);
  }

  // .pb.RangeField repost_count = 26;
  if (this->has_repost_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::repost_count(this), target, stream);
  }

  // repeated string stream_type = 27;
  for (int i = 0, n = this->_internal_stream_type_size(); i < n; i++) {
    const auto& s = this->_internal_stream_type(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.stream_type");
    target = stream->WriteString(27, s, target);
  }

  // repeated string media_type = 28;
  for (int i = 0, n = this->_internal_media_type_size(); i < n; i++) {
    const auto& s = this->_internal_media_type(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.media_type");
    target = stream->WriteString(28, s, target);
  }

  // .pb.RangeField fee_amount = 29;
  if (this->has_fee_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::fee_amount(this), target, stream);
  }

  // string fee_currency = 30;
  if (this->fee_currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fee_currency().data(), static_cast<int>(this->_internal_fee_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.fee_currency");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_fee_currency(), target);
  }

  // .pb.RangeField duration = 31;
  if (this->has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::duration(this), target, stream);
  }

  // string reposted_claim_id = 32;
  if (this->reposted_claim_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reposted_claim_id().data(), static_cast<int>(this->_internal_reposted_claim_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.reposted_claim_id");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_reposted_claim_id(), target);
  }

  // .pb.RangeField censor_type = 33;
  if (this->has_censor_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::censor_type(this), target, stream);
  }

  // string claims_in_channel = 34;
  if (this->claims_in_channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_claims_in_channel().data(), static_cast<int>(this->_internal_claims_in_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.claims_in_channel");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_claims_in_channel(), target);
  }

  // .pb.RangeField channel_join = 35;
  if (this->has_channel_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::channel_join(this), target, stream);
  }

  // .pb.BoolValue is_signature_valid = 36;
  if (this->has_is_signature_valid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::is_signature_valid(this), target, stream);
  }

  // .pb.RangeField effective_amount = 37;
  if (this->has_effective_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::effective_amount(this), target, stream);
  }

  // .pb.RangeField support_amount = 38;
  if (this->has_support_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::support_amount(this), target, stream);
  }

  // .pb.RangeField trending_score = 39;
  if (this->has_trending_score()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::trending_score(this), target, stream);
  }

  // string tx_id = 43;
  if (this->tx_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_id().data(), static_cast<int>(this->_internal_tx_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.tx_id");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_tx_id(), target);
  }

  // .pb.UInt32Value tx_nout = 44;
  if (this->has_tx_nout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::tx_nout(this), target, stream);
  }

  // string signature = 45;
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.signature");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_signature(), target);
  }

  // string signature_digest = 46;
  if (this->signature_digest().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature_digest().data(), static_cast<int>(this->_internal_signature_digest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.signature_digest");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_signature_digest(), target);
  }

  // string public_key_bytes = 47;
  if (this->public_key_bytes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key_bytes().data(), static_cast<int>(this->_internal_public_key_bytes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.public_key_bytes");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_public_key_bytes(), target);
  }

  // string public_key_id = 48;
  if (this->public_key_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key_id().data(), static_cast<int>(this->_internal_public_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.public_key_id");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_public_key_id(), target);
  }

  // repeated string any_tags = 49;
  for (int i = 0, n = this->_internal_any_tags_size(); i < n; i++) {
    const auto& s = this->_internal_any_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.any_tags");
    target = stream->WriteString(49, s, target);
  }

  // repeated string all_tags = 50;
  for (int i = 0, n = this->_internal_all_tags_size(); i < n; i++) {
    const auto& s = this->_internal_all_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.all_tags");
    target = stream->WriteString(50, s, target);
  }

  // repeated string not_tags = 51;
  for (int i = 0, n = this->_internal_not_tags_size(); i < n; i++) {
    const auto& s = this->_internal_not_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.not_tags");
    target = stream->WriteString(51, s, target);
  }

  // bool has_channel_signature = 52;
  if (this->has_channel_signature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(52, this->_internal_has_channel_signature(), target);
  }

  // .pb.BoolValue has_source = 53;
  if (this->has_has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::has_source(this), target, stream);
  }

  // uint32 limit_claims_per_channel = 54;
  if (this->limit_claims_per_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(54, this->_internal_limit_claims_per_channel(), target);
  }

  // repeated string any_languages = 55;
  for (int i = 0, n = this->_internal_any_languages_size(); i < n; i++) {
    const auto& s = this->_internal_any_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.any_languages");
    target = stream->WriteString(55, s, target);
  }

  // repeated string all_languages = 56;
  for (int i = 0, n = this->_internal_all_languages_size(); i < n; i++) {
    const auto& s = this->_internal_all_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.all_languages");
    target = stream->WriteString(56, s, target);
  }

  // bool remove_duplicates = 57;
  if (this->remove_duplicates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(57, this->_internal_remove_duplicates(), target);
  }

  // bool no_totals = 58;
  if (this->no_totals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(58, this->_internal_no_totals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SearchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string order_by = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(order_by_.size());
  for (int i = 0, n = order_by_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      order_by_.Get(i));
  }

  // repeated string claim_type = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(claim_type_.size());
  for (int i = 0, n = claim_type_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      claim_type_.Get(i));
  }

  // repeated string stream_type = 27;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stream_type_.size());
  for (int i = 0, n = stream_type_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stream_type_.Get(i));
  }

  // repeated string media_type = 28;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(media_type_.size());
  for (int i = 0, n = media_type_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      media_type_.Get(i));
  }

  // repeated string any_tags = 49;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_tags_.size());
  for (int i = 0, n = any_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_tags_.Get(i));
  }

  // repeated string all_tags = 50;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(all_tags_.size());
  for (int i = 0, n = all_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      all_tags_.Get(i));
  }

  // repeated string not_tags = 51;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(not_tags_.size());
  for (int i = 0, n = not_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      not_tags_.Get(i));
  }

  // repeated string any_languages = 55;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_languages_.size());
  for (int i = 0, n = any_languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_languages_.Get(i));
  }

  // repeated string all_languages = 56;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(all_languages_.size());
  for (int i = 0, n = all_languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      all_languages_.Get(i));
  }

  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string last_take_over_height = 8;
  if (this->last_take_over_height().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_take_over_height());
  }

  // string name = 9;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string normalized_name = 10;
  if (this->normalized_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_normalized_name());
  }

  // string short_url = 20;
  if (this->short_url().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_short_url());
  }

  // string canonical_url = 21;
  if (this->canonical_url().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_canonical_url());
  }

  // string title = 22;
  if (this->title().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string author = 23;
  if (this->author().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author());
  }

  // string description = 24;
  if (this->description().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string fee_currency = 30;
  if (this->fee_currency().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fee_currency());
  }

  // string reposted_claim_id = 32;
  if (this->reposted_claim_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reposted_claim_id());
  }

  // string claims_in_channel = 34;
  if (this->claims_in_channel().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_claims_in_channel());
  }

  // string tx_id = 43;
  if (this->tx_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_id());
  }

  // string signature = 45;
  if (this->signature().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // string signature_digest = 46;
  if (this->signature_digest().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature_digest());
  }

  // string public_key_bytes = 47;
  if (this->public_key_bytes().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key_bytes());
  }

  // string public_key_id = 48;
  if (this->public_key_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key_id());
  }

  // .pb.InvertibleField claim_id = 1;
  if (this->has_claim_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *claim_id_);
  }

  // .pb.InvertibleField channel_id = 2;
  if (this->has_channel_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_id_);
  }

  // .pb.RangeField tx_position = 11;
  if (this->has_tx_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tx_position_);
  }

  // .pb.RangeField amount = 12;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // .pb.RangeField timestamp = 13;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .pb.RangeField creation_timestamp = 14;
  if (this->has_creation_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *creation_timestamp_);
  }

  // .pb.RangeField height = 15;
  if (this->has_height()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *height_);
  }

  // .pb.RangeField creation_height = 16;
  if (this->has_creation_height()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *creation_height_);
  }

  // .pb.RangeField activation_height = 17;
  if (this->has_activation_height()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activation_height_);
  }

  // .pb.RangeField expiration_height = 18;
  if (this->has_expiration_height()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiration_height_);
  }

  // .pb.RangeField release_time = 19;
  if (this->has_release_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *release_time_);
  }

  // .pb.RangeField repost_count = 26;
  if (this->has_repost_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repost_count_);
  }

  // .pb.RangeField fee_amount = 29;
  if (this->has_fee_amount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fee_amount_);
  }

  // .pb.RangeField duration = 31;
  if (this->has_duration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .pb.RangeField censor_type = 33;
  if (this->has_censor_type()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *censor_type_);
  }

  // .pb.RangeField channel_join = 35;
  if (this->has_channel_join()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_join_);
  }

  // .pb.BoolValue is_signature_valid = 36;
  if (this->has_is_signature_valid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *is_signature_valid_);
  }

  // .pb.RangeField effective_amount = 37;
  if (this->has_effective_amount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effective_amount_);
  }

  // .pb.RangeField support_amount = 38;
  if (this->has_support_amount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *support_amount_);
  }

  // .pb.RangeField trending_score = 39;
  if (this->has_trending_score()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trending_score_);
  }

  // .pb.UInt32Value tx_nout = 44;
  if (this->has_tx_nout()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tx_nout_);
  }

  // .pb.BoolValue has_source = 53;
  if (this->has_has_source()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *has_source_);
  }

  // uint32 limit = 4;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  // uint32 offset = 6;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offset());
  }

  // bool is_controlling = 7;
  if (this->is_controlling() != 0) {
    total_size += 1 + 1;
  }

  // bool has_channel_signature = 52;
  if (this->has_channel_signature() != 0) {
    total_size += 2 + 1;
  }

  // bool remove_duplicates = 57;
  if (this->remove_duplicates() != 0) {
    total_size += 2 + 1;
  }

  // bool no_totals = 58;
  if (this->no_totals() != 0) {
    total_size += 2 + 1;
  }

  // uint32 limit_claims_per_channel = 54;
  if (this->limit_claims_per_channel() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit_claims_per_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SearchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SearchRequest)
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_by_.MergeFrom(from.order_by_);
  claim_type_.MergeFrom(from.claim_type_);
  stream_type_.MergeFrom(from.stream_type_);
  media_type_.MergeFrom(from.media_type_);
  any_tags_.MergeFrom(from.any_tags_);
  all_tags_.MergeFrom(from.all_tags_);
  not_tags_.MergeFrom(from.not_tags_);
  any_languages_.MergeFrom(from.any_languages_);
  all_languages_.MergeFrom(from.all_languages_);
  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.last_take_over_height().size() > 0) {
    _internal_set_last_take_over_height(from._internal_last_take_over_height());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.normalized_name().size() > 0) {
    _internal_set_normalized_name(from._internal_normalized_name());
  }
  if (from.short_url().size() > 0) {
    _internal_set_short_url(from._internal_short_url());
  }
  if (from.canonical_url().size() > 0) {
    _internal_set_canonical_url(from._internal_canonical_url());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.author().size() > 0) {
    _internal_set_author(from._internal_author());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.fee_currency().size() > 0) {
    _internal_set_fee_currency(from._internal_fee_currency());
  }
  if (from.reposted_claim_id().size() > 0) {
    _internal_set_reposted_claim_id(from._internal_reposted_claim_id());
  }
  if (from.claims_in_channel().size() > 0) {
    _internal_set_claims_in_channel(from._internal_claims_in_channel());
  }
  if (from.tx_id().size() > 0) {
    _internal_set_tx_id(from._internal_tx_id());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.signature_digest().size() > 0) {
    _internal_set_signature_digest(from._internal_signature_digest());
  }
  if (from.public_key_bytes().size() > 0) {
    _internal_set_public_key_bytes(from._internal_public_key_bytes());
  }
  if (from.public_key_id().size() > 0) {
    _internal_set_public_key_id(from._internal_public_key_id());
  }
  if (from.has_claim_id()) {
    _internal_mutable_claim_id()->::pb::InvertibleField::MergeFrom(from._internal_claim_id());
  }
  if (from.has_channel_id()) {
    _internal_mutable_channel_id()->::pb::InvertibleField::MergeFrom(from._internal_channel_id());
  }
  if (from.has_tx_position()) {
    _internal_mutable_tx_position()->::pb::RangeField::MergeFrom(from._internal_tx_position());
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::pb::RangeField::MergeFrom(from._internal_amount());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->::pb::RangeField::MergeFrom(from._internal_timestamp());
  }
  if (from.has_creation_timestamp()) {
    _internal_mutable_creation_timestamp()->::pb::RangeField::MergeFrom(from._internal_creation_timestamp());
  }
  if (from.has_height()) {
    _internal_mutable_height()->::pb::RangeField::MergeFrom(from._internal_height());
  }
  if (from.has_creation_height()) {
    _internal_mutable_creation_height()->::pb::RangeField::MergeFrom(from._internal_creation_height());
  }
  if (from.has_activation_height()) {
    _internal_mutable_activation_height()->::pb::RangeField::MergeFrom(from._internal_activation_height());
  }
  if (from.has_expiration_height()) {
    _internal_mutable_expiration_height()->::pb::RangeField::MergeFrom(from._internal_expiration_height());
  }
  if (from.has_release_time()) {
    _internal_mutable_release_time()->::pb::RangeField::MergeFrom(from._internal_release_time());
  }
  if (from.has_repost_count()) {
    _internal_mutable_repost_count()->::pb::RangeField::MergeFrom(from._internal_repost_count());
  }
  if (from.has_fee_amount()) {
    _internal_mutable_fee_amount()->::pb::RangeField::MergeFrom(from._internal_fee_amount());
  }
  if (from.has_duration()) {
    _internal_mutable_duration()->::pb::RangeField::MergeFrom(from._internal_duration());
  }
  if (from.has_censor_type()) {
    _internal_mutable_censor_type()->::pb::RangeField::MergeFrom(from._internal_censor_type());
  }
  if (from.has_channel_join()) {
    _internal_mutable_channel_join()->::pb::RangeField::MergeFrom(from._internal_channel_join());
  }
  if (from.has_is_signature_valid()) {
    _internal_mutable_is_signature_valid()->::pb::BoolValue::MergeFrom(from._internal_is_signature_valid());
  }
  if (from.has_effective_amount()) {
    _internal_mutable_effective_amount()->::pb::RangeField::MergeFrom(from._internal_effective_amount());
  }
  if (from.has_support_amount()) {
    _internal_mutable_support_amount()->::pb::RangeField::MergeFrom(from._internal_support_amount());
  }
  if (from.has_trending_score()) {
    _internal_mutable_trending_score()->::pb::RangeField::MergeFrom(from._internal_trending_score());
  }
  if (from.has_tx_nout()) {
    _internal_mutable_tx_nout()->::pb::UInt32Value::MergeFrom(from._internal_tx_nout());
  }
  if (from.has_has_source()) {
    _internal_mutable_has_source()->::pb::BoolValue::MergeFrom(from._internal_has_source());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.is_controlling() != 0) {
    _internal_set_is_controlling(from._internal_is_controlling());
  }
  if (from.has_channel_signature() != 0) {
    _internal_set_has_channel_signature(from._internal_has_channel_signature());
  }
  if (from.remove_duplicates() != 0) {
    _internal_set_remove_duplicates(from._internal_remove_duplicates());
  }
  if (from.no_totals() != 0) {
    _internal_set_no_totals(from._internal_no_totals());
  }
  if (from.limit_claims_per_channel() != 0) {
    _internal_set_limit_claims_per_channel(from._internal_limit_claims_per_channel());
  }
}

void SearchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::InternalSwap(SearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  order_by_.InternalSwap(&other->order_by_);
  claim_type_.InternalSwap(&other->claim_type_);
  stream_type_.InternalSwap(&other->stream_type_);
  media_type_.InternalSwap(&other->media_type_);
  any_tags_.InternalSwap(&other->any_tags_);
  all_tags_.InternalSwap(&other->all_tags_);
  not_tags_.InternalSwap(&other->not_tags_);
  any_languages_.InternalSwap(&other->any_languages_);
  all_languages_.InternalSwap(&other->all_languages_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_take_over_height_.Swap(&other->last_take_over_height_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  normalized_name_.Swap(&other->normalized_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  short_url_.Swap(&other->short_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  canonical_url_.Swap(&other->canonical_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  author_.Swap(&other->author_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fee_currency_.Swap(&other->fee_currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reposted_claim_id_.Swap(&other->reposted_claim_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  claims_in_channel_.Swap(&other->claims_in_channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_id_.Swap(&other->tx_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_digest_.Swap(&other->signature_digest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_key_bytes_.Swap(&other->public_key_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_key_id_.Swap(&other->public_key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchRequest, limit_claims_per_channel_)
      + sizeof(SearchRequest::limit_claims_per_channel_)
      - PROTOBUF_FIELD_OFFSET(SearchRequest, claim_id_)>(
          reinterpret_cast<char*>(&claim_id_),
          reinterpret_cast<char*>(&other->claim_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::InvertibleField* Arena::CreateMaybeMessage< ::pb::InvertibleField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::InvertibleField >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BoolValue* Arena::CreateMaybeMessage< ::pb::BoolValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::BoolValue >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::UInt32Value* Arena::CreateMaybeMessage< ::pb::UInt32Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::UInt32Value >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RangeField* Arena::CreateMaybeMessage< ::pb::RangeField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::RangeField >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SearchRequest* Arena::CreateMaybeMessage< ::pb::SearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SearchRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
