// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result.proto

#ifndef PROTOBUF_result_2eproto__INCLUDED
#define PROTOBUF_result_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace pb {
class Blocked;
class BlockedDefaultTypeInternal;
extern BlockedDefaultTypeInternal _Blocked_default_instance_;
class ClaimMeta;
class ClaimMetaDefaultTypeInternal;
extern ClaimMetaDefaultTypeInternal _ClaimMeta_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class Output;
class OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
class Outputs;
class OutputsDefaultTypeInternal;
extern OutputsDefaultTypeInternal _Outputs_default_instance_;
}  // namespace pb

namespace pb {

namespace protobuf_result_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_result_2eproto

enum Error_Code {
  Error_Code_UNKNOWN_CODE = 0,
  Error_Code_NOT_FOUND = 1,
  Error_Code_INVALID = 2,
  Error_Code_BLOCKED = 3,
  Error_Code_Error_Code_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Error_Code_Error_Code_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Error_Code_IsValid(int value);
const Error_Code Error_Code_Code_MIN = Error_Code_UNKNOWN_CODE;
const Error_Code Error_Code_Code_MAX = Error_Code_BLOCKED;
const int Error_Code_Code_ARRAYSIZE = Error_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* Error_Code_descriptor();
inline const ::std::string& Error_Code_Name(Error_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    Error_Code_descriptor(), value);
}
inline bool Error_Code_Parse(
    const ::std::string& name, Error_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error_Code>(
    Error_Code_descriptor(), name, value);
}
// ===================================================================

class Outputs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Outputs) */ {
 public:
  Outputs();
  virtual ~Outputs();

  Outputs(const Outputs& from);

  inline Outputs& operator=(const Outputs& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Outputs& default_instance();

  static inline const Outputs* internal_default_instance() {
    return reinterpret_cast<const Outputs*>(
               &_Outputs_default_instance_);
  }

  void Swap(Outputs* other);

  // implements Message ----------------------------------------------

  inline Outputs* New() const PROTOBUF_FINAL { return New(NULL); }

  Outputs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Outputs& from);
  void MergeFrom(const Outputs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Outputs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Output txos = 1;
  int txos_size() const;
  void clear_txos();
  static const int kTxosFieldNumber = 1;
  const ::pb::Output& txos(int index) const;
  ::pb::Output* mutable_txos(int index);
  ::pb::Output* add_txos();
  ::google::protobuf::RepeatedPtrField< ::pb::Output >*
      mutable_txos();
  const ::google::protobuf::RepeatedPtrField< ::pb::Output >&
      txos() const;

  // repeated .pb.Output extra_txos = 2;
  int extra_txos_size() const;
  void clear_extra_txos();
  static const int kExtraTxosFieldNumber = 2;
  const ::pb::Output& extra_txos(int index) const;
  ::pb::Output* mutable_extra_txos(int index);
  ::pb::Output* add_extra_txos();
  ::google::protobuf::RepeatedPtrField< ::pb::Output >*
      mutable_extra_txos();
  const ::google::protobuf::RepeatedPtrField< ::pb::Output >&
      extra_txos() const;

  // repeated .pb.Blocked blocked = 5;
  int blocked_size() const;
  void clear_blocked();
  static const int kBlockedFieldNumber = 5;
  const ::pb::Blocked& blocked(int index) const;
  ::pb::Blocked* mutable_blocked(int index);
  ::pb::Blocked* add_blocked();
  ::google::protobuf::RepeatedPtrField< ::pb::Blocked >*
      mutable_blocked();
  const ::google::protobuf::RepeatedPtrField< ::pb::Blocked >&
      blocked() const;

  // uint32 total = 3;
  void clear_total();
  static const int kTotalFieldNumber = 3;
  ::google::protobuf::uint32 total() const;
  void set_total(::google::protobuf::uint32 value);

  // uint32 offset = 4;
  void clear_offset();
  static const int kOffsetFieldNumber = 4;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // uint32 blocked_total = 6;
  void clear_blocked_total();
  static const int kBlockedTotalFieldNumber = 6;
  ::google::protobuf::uint32 blocked_total() const;
  void set_blocked_total(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Outputs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Output > txos_;
  ::google::protobuf::RepeatedPtrField< ::pb::Output > extra_txos_;
  ::google::protobuf::RepeatedPtrField< ::pb::Blocked > blocked_;
  ::google::protobuf::uint32 total_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 blocked_total_;
  mutable int _cached_size_;
  friend struct  protobuf_result_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Output : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Output) */ {
 public:
  Output();
  virtual ~Output();

  Output(const Output& from);

  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Output& default_instance();

  enum MetaCase {
    kClaim = 7,
    kError = 15,
    META_NOT_SET = 0,
  };

  static inline const Output* internal_default_instance() {
    return reinterpret_cast<const Output*>(
               &_Output_default_instance_);
  }

  void Swap(Output* other);

  // implements Message ----------------------------------------------

  inline Output* New() const PROTOBUF_FINAL { return New(NULL); }

  Output* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Output& from);
  void MergeFrom(const Output& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Output* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes tx_hash = 1;
  void clear_tx_hash();
  static const int kTxHashFieldNumber = 1;
  const ::std::string& tx_hash() const;
  void set_tx_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_tx_hash(::std::string&& value);
  #endif
  void set_tx_hash(const char* value);
  void set_tx_hash(const void* value, size_t size);
  ::std::string* mutable_tx_hash();
  ::std::string* release_tx_hash();
  void set_allocated_tx_hash(::std::string* tx_hash);

  // uint32 nout = 2;
  void clear_nout();
  static const int kNoutFieldNumber = 2;
  ::google::protobuf::uint32 nout() const;
  void set_nout(::google::protobuf::uint32 value);

  // uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // .pb.ClaimMeta claim = 7;
  bool has_claim() const;
  void clear_claim();
  static const int kClaimFieldNumber = 7;
  const ::pb::ClaimMeta& claim() const;
  ::pb::ClaimMeta* mutable_claim();
  ::pb::ClaimMeta* release_claim();
  void set_allocated_claim(::pb::ClaimMeta* claim);

  // .pb.Error error = 15;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 15;
  const ::pb::Error& error() const;
  ::pb::Error* mutable_error();
  ::pb::Error* release_error();
  void set_allocated_error(::pb::Error* error);

  MetaCase meta_case() const;
  // @@protoc_insertion_point(class_scope:pb.Output)
 private:
  void set_has_claim();
  void set_has_error();

  inline bool has_meta() const;
  void clear_meta();
  inline void clear_has_meta();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tx_hash_;
  ::google::protobuf::uint32 nout_;
  ::google::protobuf::uint32 height_;
  union MetaUnion {
    MetaUnion() {}
    ::pb::ClaimMeta* claim_;
    ::pb::Error* error_;
  } meta_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_result_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClaimMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ClaimMeta) */ {
 public:
  ClaimMeta();
  virtual ~ClaimMeta();

  ClaimMeta(const ClaimMeta& from);

  inline ClaimMeta& operator=(const ClaimMeta& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClaimMeta& default_instance();

  static inline const ClaimMeta* internal_default_instance() {
    return reinterpret_cast<const ClaimMeta*>(
               &_ClaimMeta_default_instance_);
  }

  void Swap(ClaimMeta* other);

  // implements Message ----------------------------------------------

  inline ClaimMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  ClaimMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClaimMeta& from);
  void MergeFrom(const ClaimMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClaimMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string short_url = 3;
  void clear_short_url();
  static const int kShortUrlFieldNumber = 3;
  const ::std::string& short_url() const;
  void set_short_url(const ::std::string& value);
  #if LANG_CXX11
  void set_short_url(::std::string&& value);
  #endif
  void set_short_url(const char* value);
  void set_short_url(const char* value, size_t size);
  ::std::string* mutable_short_url();
  ::std::string* release_short_url();
  void set_allocated_short_url(::std::string* short_url);

  // string canonical_url = 4;
  void clear_canonical_url();
  static const int kCanonicalUrlFieldNumber = 4;
  const ::std::string& canonical_url() const;
  void set_canonical_url(const ::std::string& value);
  #if LANG_CXX11
  void set_canonical_url(::std::string&& value);
  #endif
  void set_canonical_url(const char* value);
  void set_canonical_url(const char* value, size_t size);
  ::std::string* mutable_canonical_url();
  ::std::string* release_canonical_url();
  void set_allocated_canonical_url(::std::string* canonical_url);

  // .pb.Output channel = 1;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::pb::Output& channel() const;
  ::pb::Output* mutable_channel();
  ::pb::Output* release_channel();
  void set_allocated_channel(::pb::Output* channel);

  // .pb.Output repost = 2;
  bool has_repost() const;
  void clear_repost();
  static const int kRepostFieldNumber = 2;
  const ::pb::Output& repost() const;
  ::pb::Output* mutable_repost();
  ::pb::Output* release_repost();
  void set_allocated_repost(::pb::Output* repost);

  // bool is_controlling = 5;
  void clear_is_controlling();
  static const int kIsControllingFieldNumber = 5;
  bool is_controlling() const;
  void set_is_controlling(bool value);

  // uint32 take_over_height = 6;
  void clear_take_over_height();
  static const int kTakeOverHeightFieldNumber = 6;
  ::google::protobuf::uint32 take_over_height() const;
  void set_take_over_height(::google::protobuf::uint32 value);

  // uint32 creation_height = 7;
  void clear_creation_height();
  static const int kCreationHeightFieldNumber = 7;
  ::google::protobuf::uint32 creation_height() const;
  void set_creation_height(::google::protobuf::uint32 value);

  // uint32 activation_height = 8;
  void clear_activation_height();
  static const int kActivationHeightFieldNumber = 8;
  ::google::protobuf::uint32 activation_height() const;
  void set_activation_height(::google::protobuf::uint32 value);

  // uint32 expiration_height = 9;
  void clear_expiration_height();
  static const int kExpirationHeightFieldNumber = 9;
  ::google::protobuf::uint32 expiration_height() const;
  void set_expiration_height(::google::protobuf::uint32 value);

  // uint32 claims_in_channel = 10;
  void clear_claims_in_channel();
  static const int kClaimsInChannelFieldNumber = 10;
  ::google::protobuf::uint32 claims_in_channel() const;
  void set_claims_in_channel(::google::protobuf::uint32 value);

  // uint64 effective_amount = 20;
  void clear_effective_amount();
  static const int kEffectiveAmountFieldNumber = 20;
  ::google::protobuf::uint64 effective_amount() const;
  void set_effective_amount(::google::protobuf::uint64 value);

  // uint32 reposted = 11;
  void clear_reposted();
  static const int kRepostedFieldNumber = 11;
  ::google::protobuf::uint32 reposted() const;
  void set_reposted(::google::protobuf::uint32 value);

  // uint32 trending_group = 22;
  void clear_trending_group();
  static const int kTrendingGroupFieldNumber = 22;
  ::google::protobuf::uint32 trending_group() const;
  void set_trending_group(::google::protobuf::uint32 value);

  // uint64 support_amount = 21;
  void clear_support_amount();
  static const int kSupportAmountFieldNumber = 21;
  ::google::protobuf::uint64 support_amount() const;
  void set_support_amount(::google::protobuf::uint64 value);

  // float trending_mixed = 23;
  void clear_trending_mixed();
  static const int kTrendingMixedFieldNumber = 23;
  float trending_mixed() const;
  void set_trending_mixed(float value);

  // float trending_local = 24;
  void clear_trending_local();
  static const int kTrendingLocalFieldNumber = 24;
  float trending_local() const;
  void set_trending_local(float value);

  // float trending_global = 25;
  void clear_trending_global();
  static const int kTrendingGlobalFieldNumber = 25;
  float trending_global() const;
  void set_trending_global(float value);

  // @@protoc_insertion_point(class_scope:pb.ClaimMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr short_url_;
  ::google::protobuf::internal::ArenaStringPtr canonical_url_;
  ::pb::Output* channel_;
  ::pb::Output* repost_;
  bool is_controlling_;
  ::google::protobuf::uint32 take_over_height_;
  ::google::protobuf::uint32 creation_height_;
  ::google::protobuf::uint32 activation_height_;
  ::google::protobuf::uint32 expiration_height_;
  ::google::protobuf::uint32 claims_in_channel_;
  ::google::protobuf::uint64 effective_amount_;
  ::google::protobuf::uint32 reposted_;
  ::google::protobuf::uint32 trending_group_;
  ::google::protobuf::uint64 support_amount_;
  float trending_mixed_;
  float trending_local_;
  float trending_global_;
  mutable int _cached_size_;
  friend struct  protobuf_result_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  inline Error* New() const PROTOBUF_FINAL { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Error_Code Code;
  static const Code UNKNOWN_CODE =
    Error_Code_UNKNOWN_CODE;
  static const Code NOT_FOUND =
    Error_Code_NOT_FOUND;
  static const Code INVALID =
    Error_Code_INVALID;
  static const Code BLOCKED =
    Error_Code_BLOCKED;
  static inline bool Code_IsValid(int value) {
    return Error_Code_IsValid(value);
  }
  static const Code Code_MIN =
    Error_Code_Code_MIN;
  static const Code Code_MAX =
    Error_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    Error_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return Error_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return Error_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return Error_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .pb.Blocked blocked = 3;
  bool has_blocked() const;
  void clear_blocked();
  static const int kBlockedFieldNumber = 3;
  const ::pb::Blocked& blocked() const;
  ::pb::Blocked* mutable_blocked();
  ::pb::Blocked* release_blocked();
  void set_allocated_blocked(::pb::Blocked* blocked);

  // .pb.Error.Code code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::pb::Error_Code code() const;
  void set_code(::pb::Error_Code value);

  // @@protoc_insertion_point(class_scope:pb.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::pb::Blocked* blocked_;
  int code_;
  mutable int _cached_size_;
  friend struct  protobuf_result_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Blocked : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Blocked) */ {
 public:
  Blocked();
  virtual ~Blocked();

  Blocked(const Blocked& from);

  inline Blocked& operator=(const Blocked& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Blocked& default_instance();

  static inline const Blocked* internal_default_instance() {
    return reinterpret_cast<const Blocked*>(
               &_Blocked_default_instance_);
  }

  void Swap(Blocked* other);

  // implements Message ----------------------------------------------

  inline Blocked* New() const PROTOBUF_FINAL { return New(NULL); }

  Blocked* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Blocked& from);
  void MergeFrom(const Blocked& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Blocked* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Output channel = 2;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  const ::pb::Output& channel() const;
  ::pb::Output* mutable_channel();
  ::pb::Output* release_channel();
  void set_allocated_channel(::pb::Output* channel);

  // uint32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Blocked)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Output* channel_;
  ::google::protobuf::uint32 count_;
  mutable int _cached_size_;
  friend struct  protobuf_result_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Outputs

// repeated .pb.Output txos = 1;
inline int Outputs::txos_size() const {
  return txos_.size();
}
inline void Outputs::clear_txos() {
  txos_.Clear();
}
inline const ::pb::Output& Outputs::txos(int index) const {
  // @@protoc_insertion_point(field_get:pb.Outputs.txos)
  return txos_.Get(index);
}
inline ::pb::Output* Outputs::mutable_txos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Outputs.txos)
  return txos_.Mutable(index);
}
inline ::pb::Output* Outputs::add_txos() {
  // @@protoc_insertion_point(field_add:pb.Outputs.txos)
  return txos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Output >*
Outputs::mutable_txos() {
  // @@protoc_insertion_point(field_mutable_list:pb.Outputs.txos)
  return &txos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Output >&
Outputs::txos() const {
  // @@protoc_insertion_point(field_list:pb.Outputs.txos)
  return txos_;
}

// repeated .pb.Output extra_txos = 2;
inline int Outputs::extra_txos_size() const {
  return extra_txos_.size();
}
inline void Outputs::clear_extra_txos() {
  extra_txos_.Clear();
}
inline const ::pb::Output& Outputs::extra_txos(int index) const {
  // @@protoc_insertion_point(field_get:pb.Outputs.extra_txos)
  return extra_txos_.Get(index);
}
inline ::pb::Output* Outputs::mutable_extra_txos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Outputs.extra_txos)
  return extra_txos_.Mutable(index);
}
inline ::pb::Output* Outputs::add_extra_txos() {
  // @@protoc_insertion_point(field_add:pb.Outputs.extra_txos)
  return extra_txos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Output >*
Outputs::mutable_extra_txos() {
  // @@protoc_insertion_point(field_mutable_list:pb.Outputs.extra_txos)
  return &extra_txos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Output >&
Outputs::extra_txos() const {
  // @@protoc_insertion_point(field_list:pb.Outputs.extra_txos)
  return extra_txos_;
}

// uint32 total = 3;
inline void Outputs::clear_total() {
  total_ = 0u;
}
inline ::google::protobuf::uint32 Outputs::total() const {
  // @@protoc_insertion_point(field_get:pb.Outputs.total)
  return total_;
}
inline void Outputs::set_total(::google::protobuf::uint32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:pb.Outputs.total)
}

// uint32 offset = 4;
inline void Outputs::clear_offset() {
  offset_ = 0u;
}
inline ::google::protobuf::uint32 Outputs::offset() const {
  // @@protoc_insertion_point(field_get:pb.Outputs.offset)
  return offset_;
}
inline void Outputs::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.Outputs.offset)
}

// repeated .pb.Blocked blocked = 5;
inline int Outputs::blocked_size() const {
  return blocked_.size();
}
inline void Outputs::clear_blocked() {
  blocked_.Clear();
}
inline const ::pb::Blocked& Outputs::blocked(int index) const {
  // @@protoc_insertion_point(field_get:pb.Outputs.blocked)
  return blocked_.Get(index);
}
inline ::pb::Blocked* Outputs::mutable_blocked(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Outputs.blocked)
  return blocked_.Mutable(index);
}
inline ::pb::Blocked* Outputs::add_blocked() {
  // @@protoc_insertion_point(field_add:pb.Outputs.blocked)
  return blocked_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Blocked >*
Outputs::mutable_blocked() {
  // @@protoc_insertion_point(field_mutable_list:pb.Outputs.blocked)
  return &blocked_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Blocked >&
Outputs::blocked() const {
  // @@protoc_insertion_point(field_list:pb.Outputs.blocked)
  return blocked_;
}

// uint32 blocked_total = 6;
inline void Outputs::clear_blocked_total() {
  blocked_total_ = 0u;
}
inline ::google::protobuf::uint32 Outputs::blocked_total() const {
  // @@protoc_insertion_point(field_get:pb.Outputs.blocked_total)
  return blocked_total_;
}
inline void Outputs::set_blocked_total(::google::protobuf::uint32 value) {
  
  blocked_total_ = value;
  // @@protoc_insertion_point(field_set:pb.Outputs.blocked_total)
}

// -------------------------------------------------------------------

// Output

// bytes tx_hash = 1;
inline void Output::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Output::tx_hash() const {
  // @@protoc_insertion_point(field_get:pb.Output.tx_hash)
  return tx_hash_.GetNoArena();
}
inline void Output::set_tx_hash(const ::std::string& value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Output.tx_hash)
}
#if LANG_CXX11
inline void Output::set_tx_hash(::std::string&& value) {
  
  tx_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Output.tx_hash)
}
#endif
inline void Output::set_tx_hash(const char* value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Output.tx_hash)
}
inline void Output::set_tx_hash(const void* value, size_t size) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Output.tx_hash)
}
inline ::std::string* Output::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:pb.Output.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Output::release_tx_hash() {
  // @@protoc_insertion_point(field_release:pb.Output.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Output::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:pb.Output.tx_hash)
}

// uint32 nout = 2;
inline void Output::clear_nout() {
  nout_ = 0u;
}
inline ::google::protobuf::uint32 Output::nout() const {
  // @@protoc_insertion_point(field_get:pb.Output.nout)
  return nout_;
}
inline void Output::set_nout(::google::protobuf::uint32 value) {
  
  nout_ = value;
  // @@protoc_insertion_point(field_set:pb.Output.nout)
}

// uint32 height = 3;
inline void Output::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 Output::height() const {
  // @@protoc_insertion_point(field_get:pb.Output.height)
  return height_;
}
inline void Output::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:pb.Output.height)
}

// .pb.ClaimMeta claim = 7;
inline bool Output::has_claim() const {
  return meta_case() == kClaim;
}
inline void Output::set_has_claim() {
  _oneof_case_[0] = kClaim;
}
inline void Output::clear_claim() {
  if (has_claim()) {
    delete meta_.claim_;
    clear_has_meta();
  }
}
inline  const ::pb::ClaimMeta& Output::claim() const {
  // @@protoc_insertion_point(field_get:pb.Output.claim)
  return has_claim()
      ? *meta_.claim_
      : ::pb::ClaimMeta::default_instance();
}
inline ::pb::ClaimMeta* Output::mutable_claim() {
  if (!has_claim()) {
    clear_meta();
    set_has_claim();
    meta_.claim_ = new ::pb::ClaimMeta;
  }
  // @@protoc_insertion_point(field_mutable:pb.Output.claim)
  return meta_.claim_;
}
inline ::pb::ClaimMeta* Output::release_claim() {
  // @@protoc_insertion_point(field_release:pb.Output.claim)
  if (has_claim()) {
    clear_has_meta();
    ::pb::ClaimMeta* temp = meta_.claim_;
    meta_.claim_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Output::set_allocated_claim(::pb::ClaimMeta* claim) {
  clear_meta();
  if (claim) {
    set_has_claim();
    meta_.claim_ = claim;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Output.claim)
}

// .pb.Error error = 15;
inline bool Output::has_error() const {
  return meta_case() == kError;
}
inline void Output::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void Output::clear_error() {
  if (has_error()) {
    delete meta_.error_;
    clear_has_meta();
  }
}
inline  const ::pb::Error& Output::error() const {
  // @@protoc_insertion_point(field_get:pb.Output.error)
  return has_error()
      ? *meta_.error_
      : ::pb::Error::default_instance();
}
inline ::pb::Error* Output::mutable_error() {
  if (!has_error()) {
    clear_meta();
    set_has_error();
    meta_.error_ = new ::pb::Error;
  }
  // @@protoc_insertion_point(field_mutable:pb.Output.error)
  return meta_.error_;
}
inline ::pb::Error* Output::release_error() {
  // @@protoc_insertion_point(field_release:pb.Output.error)
  if (has_error()) {
    clear_has_meta();
    ::pb::Error* temp = meta_.error_;
    meta_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Output::set_allocated_error(::pb::Error* error) {
  clear_meta();
  if (error) {
    set_has_error();
    meta_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Output.error)
}

inline bool Output::has_meta() const {
  return meta_case() != META_NOT_SET;
}
inline void Output::clear_has_meta() {
  _oneof_case_[0] = META_NOT_SET;
}
inline Output::MetaCase Output::meta_case() const {
  return Output::MetaCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ClaimMeta

// .pb.Output channel = 1;
inline bool ClaimMeta::has_channel() const {
  return this != internal_default_instance() && channel_ != NULL;
}
inline void ClaimMeta::clear_channel() {
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) delete channel_;
  channel_ = NULL;
}
inline const ::pb::Output& ClaimMeta::channel() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.channel)
  return channel_ != NULL ? *channel_
                         : *::pb::Output::internal_default_instance();
}
inline ::pb::Output* ClaimMeta::mutable_channel() {
  
  if (channel_ == NULL) {
    channel_ = new ::pb::Output;
  }
  // @@protoc_insertion_point(field_mutable:pb.ClaimMeta.channel)
  return channel_;
}
inline ::pb::Output* ClaimMeta::release_channel() {
  // @@protoc_insertion_point(field_release:pb.ClaimMeta.channel)
  
  ::pb::Output* temp = channel_;
  channel_ = NULL;
  return temp;
}
inline void ClaimMeta::set_allocated_channel(::pb::Output* channel) {
  delete channel_;
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ClaimMeta.channel)
}

// .pb.Output repost = 2;
inline bool ClaimMeta::has_repost() const {
  return this != internal_default_instance() && repost_ != NULL;
}
inline void ClaimMeta::clear_repost() {
  if (GetArenaNoVirtual() == NULL && repost_ != NULL) delete repost_;
  repost_ = NULL;
}
inline const ::pb::Output& ClaimMeta::repost() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.repost)
  return repost_ != NULL ? *repost_
                         : *::pb::Output::internal_default_instance();
}
inline ::pb::Output* ClaimMeta::mutable_repost() {
  
  if (repost_ == NULL) {
    repost_ = new ::pb::Output;
  }
  // @@protoc_insertion_point(field_mutable:pb.ClaimMeta.repost)
  return repost_;
}
inline ::pb::Output* ClaimMeta::release_repost() {
  // @@protoc_insertion_point(field_release:pb.ClaimMeta.repost)
  
  ::pb::Output* temp = repost_;
  repost_ = NULL;
  return temp;
}
inline void ClaimMeta::set_allocated_repost(::pb::Output* repost) {
  delete repost_;
  repost_ = repost;
  if (repost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ClaimMeta.repost)
}

// string short_url = 3;
inline void ClaimMeta::clear_short_url() {
  short_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClaimMeta::short_url() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.short_url)
  return short_url_.GetNoArena();
}
inline void ClaimMeta::set_short_url(const ::std::string& value) {
  
  short_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.short_url)
}
#if LANG_CXX11
inline void ClaimMeta::set_short_url(::std::string&& value) {
  
  short_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ClaimMeta.short_url)
}
#endif
inline void ClaimMeta::set_short_url(const char* value) {
  
  short_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ClaimMeta.short_url)
}
inline void ClaimMeta::set_short_url(const char* value, size_t size) {
  
  short_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ClaimMeta.short_url)
}
inline ::std::string* ClaimMeta::mutable_short_url() {
  
  // @@protoc_insertion_point(field_mutable:pb.ClaimMeta.short_url)
  return short_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClaimMeta::release_short_url() {
  // @@protoc_insertion_point(field_release:pb.ClaimMeta.short_url)
  
  return short_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClaimMeta::set_allocated_short_url(::std::string* short_url) {
  if (short_url != NULL) {
    
  } else {
    
  }
  short_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_url);
  // @@protoc_insertion_point(field_set_allocated:pb.ClaimMeta.short_url)
}

// string canonical_url = 4;
inline void ClaimMeta::clear_canonical_url() {
  canonical_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClaimMeta::canonical_url() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.canonical_url)
  return canonical_url_.GetNoArena();
}
inline void ClaimMeta::set_canonical_url(const ::std::string& value) {
  
  canonical_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.canonical_url)
}
#if LANG_CXX11
inline void ClaimMeta::set_canonical_url(::std::string&& value) {
  
  canonical_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ClaimMeta.canonical_url)
}
#endif
inline void ClaimMeta::set_canonical_url(const char* value) {
  
  canonical_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ClaimMeta.canonical_url)
}
inline void ClaimMeta::set_canonical_url(const char* value, size_t size) {
  
  canonical_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ClaimMeta.canonical_url)
}
inline ::std::string* ClaimMeta::mutable_canonical_url() {
  
  // @@protoc_insertion_point(field_mutable:pb.ClaimMeta.canonical_url)
  return canonical_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClaimMeta::release_canonical_url() {
  // @@protoc_insertion_point(field_release:pb.ClaimMeta.canonical_url)
  
  return canonical_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClaimMeta::set_allocated_canonical_url(::std::string* canonical_url) {
  if (canonical_url != NULL) {
    
  } else {
    
  }
  canonical_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonical_url);
  // @@protoc_insertion_point(field_set_allocated:pb.ClaimMeta.canonical_url)
}

// bool is_controlling = 5;
inline void ClaimMeta::clear_is_controlling() {
  is_controlling_ = false;
}
inline bool ClaimMeta::is_controlling() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.is_controlling)
  return is_controlling_;
}
inline void ClaimMeta::set_is_controlling(bool value) {
  
  is_controlling_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.is_controlling)
}

// uint32 take_over_height = 6;
inline void ClaimMeta::clear_take_over_height() {
  take_over_height_ = 0u;
}
inline ::google::protobuf::uint32 ClaimMeta::take_over_height() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.take_over_height)
  return take_over_height_;
}
inline void ClaimMeta::set_take_over_height(::google::protobuf::uint32 value) {
  
  take_over_height_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.take_over_height)
}

// uint32 creation_height = 7;
inline void ClaimMeta::clear_creation_height() {
  creation_height_ = 0u;
}
inline ::google::protobuf::uint32 ClaimMeta::creation_height() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.creation_height)
  return creation_height_;
}
inline void ClaimMeta::set_creation_height(::google::protobuf::uint32 value) {
  
  creation_height_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.creation_height)
}

// uint32 activation_height = 8;
inline void ClaimMeta::clear_activation_height() {
  activation_height_ = 0u;
}
inline ::google::protobuf::uint32 ClaimMeta::activation_height() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.activation_height)
  return activation_height_;
}
inline void ClaimMeta::set_activation_height(::google::protobuf::uint32 value) {
  
  activation_height_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.activation_height)
}

// uint32 expiration_height = 9;
inline void ClaimMeta::clear_expiration_height() {
  expiration_height_ = 0u;
}
inline ::google::protobuf::uint32 ClaimMeta::expiration_height() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.expiration_height)
  return expiration_height_;
}
inline void ClaimMeta::set_expiration_height(::google::protobuf::uint32 value) {
  
  expiration_height_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.expiration_height)
}

// uint32 claims_in_channel = 10;
inline void ClaimMeta::clear_claims_in_channel() {
  claims_in_channel_ = 0u;
}
inline ::google::protobuf::uint32 ClaimMeta::claims_in_channel() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.claims_in_channel)
  return claims_in_channel_;
}
inline void ClaimMeta::set_claims_in_channel(::google::protobuf::uint32 value) {
  
  claims_in_channel_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.claims_in_channel)
}

// uint32 reposted = 11;
inline void ClaimMeta::clear_reposted() {
  reposted_ = 0u;
}
inline ::google::protobuf::uint32 ClaimMeta::reposted() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.reposted)
  return reposted_;
}
inline void ClaimMeta::set_reposted(::google::protobuf::uint32 value) {
  
  reposted_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.reposted)
}

// uint64 effective_amount = 20;
inline void ClaimMeta::clear_effective_amount() {
  effective_amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClaimMeta::effective_amount() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.effective_amount)
  return effective_amount_;
}
inline void ClaimMeta::set_effective_amount(::google::protobuf::uint64 value) {
  
  effective_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.effective_amount)
}

// uint64 support_amount = 21;
inline void ClaimMeta::clear_support_amount() {
  support_amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClaimMeta::support_amount() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.support_amount)
  return support_amount_;
}
inline void ClaimMeta::set_support_amount(::google::protobuf::uint64 value) {
  
  support_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.support_amount)
}

// uint32 trending_group = 22;
inline void ClaimMeta::clear_trending_group() {
  trending_group_ = 0u;
}
inline ::google::protobuf::uint32 ClaimMeta::trending_group() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.trending_group)
  return trending_group_;
}
inline void ClaimMeta::set_trending_group(::google::protobuf::uint32 value) {
  
  trending_group_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.trending_group)
}

// float trending_mixed = 23;
inline void ClaimMeta::clear_trending_mixed() {
  trending_mixed_ = 0;
}
inline float ClaimMeta::trending_mixed() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.trending_mixed)
  return trending_mixed_;
}
inline void ClaimMeta::set_trending_mixed(float value) {
  
  trending_mixed_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.trending_mixed)
}

// float trending_local = 24;
inline void ClaimMeta::clear_trending_local() {
  trending_local_ = 0;
}
inline float ClaimMeta::trending_local() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.trending_local)
  return trending_local_;
}
inline void ClaimMeta::set_trending_local(float value) {
  
  trending_local_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.trending_local)
}

// float trending_global = 25;
inline void ClaimMeta::clear_trending_global() {
  trending_global_ = 0;
}
inline float ClaimMeta::trending_global() const {
  // @@protoc_insertion_point(field_get:pb.ClaimMeta.trending_global)
  return trending_global_;
}
inline void ClaimMeta::set_trending_global(float value) {
  
  trending_global_ = value;
  // @@protoc_insertion_point(field_set:pb.ClaimMeta.trending_global)
}

// -------------------------------------------------------------------

// Error

// .pb.Error.Code code = 1;
inline void Error::clear_code() {
  code_ = 0;
}
inline ::pb::Error_Code Error::code() const {
  // @@protoc_insertion_point(field_get:pb.Error.code)
  return static_cast< ::pb::Error_Code >(code_);
}
inline void Error::set_code(::pb::Error_Code value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:pb.Error.code)
}

// string text = 2;
inline void Error::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::text() const {
  // @@protoc_insertion_point(field_get:pb.Error.text)
  return text_.GetNoArena();
}
inline void Error::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Error.text)
}
#if LANG_CXX11
inline void Error::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Error.text)
}
#endif
inline void Error::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Error.text)
}
inline void Error::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Error.text)
}
inline ::std::string* Error::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:pb.Error.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_text() {
  // @@protoc_insertion_point(field_release:pb.Error.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:pb.Error.text)
}

// .pb.Blocked blocked = 3;
inline bool Error::has_blocked() const {
  return this != internal_default_instance() && blocked_ != NULL;
}
inline void Error::clear_blocked() {
  if (GetArenaNoVirtual() == NULL && blocked_ != NULL) delete blocked_;
  blocked_ = NULL;
}
inline const ::pb::Blocked& Error::blocked() const {
  // @@protoc_insertion_point(field_get:pb.Error.blocked)
  return blocked_ != NULL ? *blocked_
                         : *::pb::Blocked::internal_default_instance();
}
inline ::pb::Blocked* Error::mutable_blocked() {
  
  if (blocked_ == NULL) {
    blocked_ = new ::pb::Blocked;
  }
  // @@protoc_insertion_point(field_mutable:pb.Error.blocked)
  return blocked_;
}
inline ::pb::Blocked* Error::release_blocked() {
  // @@protoc_insertion_point(field_release:pb.Error.blocked)
  
  ::pb::Blocked* temp = blocked_;
  blocked_ = NULL;
  return temp;
}
inline void Error::set_allocated_blocked(::pb::Blocked* blocked) {
  delete blocked_;
  blocked_ = blocked;
  if (blocked) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Error.blocked)
}

// -------------------------------------------------------------------

// Blocked

// uint32 count = 1;
inline void Blocked::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 Blocked::count() const {
  // @@protoc_insertion_point(field_get:pb.Blocked.count)
  return count_;
}
inline void Blocked::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:pb.Blocked.count)
}

// .pb.Output channel = 2;
inline bool Blocked::has_channel() const {
  return this != internal_default_instance() && channel_ != NULL;
}
inline void Blocked::clear_channel() {
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) delete channel_;
  channel_ = NULL;
}
inline const ::pb::Output& Blocked::channel() const {
  // @@protoc_insertion_point(field_get:pb.Blocked.channel)
  return channel_ != NULL ? *channel_
                         : *::pb::Output::internal_default_instance();
}
inline ::pb::Output* Blocked::mutable_channel() {
  
  if (channel_ == NULL) {
    channel_ = new ::pb::Output;
  }
  // @@protoc_insertion_point(field_mutable:pb.Blocked.channel)
  return channel_;
}
inline ::pb::Output* Blocked::release_channel() {
  // @@protoc_insertion_point(field_release:pb.Blocked.channel)
  
  ::pb::Output* temp = channel_;
  channel_ = NULL;
  return temp;
}
inline void Blocked::set_allocated_channel(::pb::Output* channel) {
  delete channel_;
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Blocked.channel)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::Error_Code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Error_Code>() {
  return ::pb::Error_Code_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_result_2eproto__INCLUDED
