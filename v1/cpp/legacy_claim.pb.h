// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: legacy_claim.proto

#ifndef PROTOBUF_INCLUDED_legacy_5fclaim_2eproto
#define PROTOBUF_INCLUDED_legacy_5fclaim_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "stream.pb.h"
#include "certificate.pb.h"
#include "signature.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_legacy_5fclaim_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_legacy_5fclaim_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_legacy_5fclaim_2eproto();
namespace legacy_pb {
class Claim;
class ClaimDefaultTypeInternal;
extern ClaimDefaultTypeInternal _Claim_default_instance_;
}  // namespace legacy_pb
namespace google {
namespace protobuf {
template<> ::legacy_pb::Claim* Arena::CreateMaybeMessage<::legacy_pb::Claim>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace legacy_pb {

enum Claim_Version {
  Claim_Version_UNKNOWN_VERSION = 0,
  Claim_Version__0_0_1 = 1
};
bool Claim_Version_IsValid(int value);
const Claim_Version Claim_Version_Version_MIN = Claim_Version_UNKNOWN_VERSION;
const Claim_Version Claim_Version_Version_MAX = Claim_Version__0_0_1;
const int Claim_Version_Version_ARRAYSIZE = Claim_Version_Version_MAX + 1;

const ::google::protobuf::EnumDescriptor* Claim_Version_descriptor();
inline const ::std::string& Claim_Version_Name(Claim_Version value) {
  return ::google::protobuf::internal::NameOfEnum(
    Claim_Version_descriptor(), value);
}
inline bool Claim_Version_Parse(
    const ::std::string& name, Claim_Version* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Claim_Version>(
    Claim_Version_descriptor(), name, value);
}
enum Claim_ClaimType {
  Claim_ClaimType_UNKNOWN_CLAIM_TYPE = 0,
  Claim_ClaimType_streamType = 1,
  Claim_ClaimType_certificateType = 2
};
bool Claim_ClaimType_IsValid(int value);
const Claim_ClaimType Claim_ClaimType_ClaimType_MIN = Claim_ClaimType_UNKNOWN_CLAIM_TYPE;
const Claim_ClaimType Claim_ClaimType_ClaimType_MAX = Claim_ClaimType_certificateType;
const int Claim_ClaimType_ClaimType_ARRAYSIZE = Claim_ClaimType_ClaimType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Claim_ClaimType_descriptor();
inline const ::std::string& Claim_ClaimType_Name(Claim_ClaimType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Claim_ClaimType_descriptor(), value);
}
inline bool Claim_ClaimType_Parse(
    const ::std::string& name, Claim_ClaimType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Claim_ClaimType>(
    Claim_ClaimType_descriptor(), name, value);
}
// ===================================================================

class Claim final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:legacy_pb.Claim) */ {
 public:
  Claim();
  virtual ~Claim();

  Claim(const Claim& from);

  inline Claim& operator=(const Claim& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Claim(Claim&& from) noexcept
    : Claim() {
    *this = ::std::move(from);
  }

  inline Claim& operator=(Claim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Claim& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Claim* internal_default_instance() {
    return reinterpret_cast<const Claim*>(
               &_Claim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Claim* other);
  friend void swap(Claim& a, Claim& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Claim* New() const final {
    return CreateMaybeMessage<Claim>(nullptr);
  }

  Claim* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Claim>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Claim& from);
  void MergeFrom(const Claim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Claim* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Claim_Version Version;
  static const Version UNKNOWN_VERSION =
    Claim_Version_UNKNOWN_VERSION;
  static const Version _0_0_1 =
    Claim_Version__0_0_1;
  static inline bool Version_IsValid(int value) {
    return Claim_Version_IsValid(value);
  }
  static const Version Version_MIN =
    Claim_Version_Version_MIN;
  static const Version Version_MAX =
    Claim_Version_Version_MAX;
  static const int Version_ARRAYSIZE =
    Claim_Version_Version_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Version_descriptor() {
    return Claim_Version_descriptor();
  }
  static inline const ::std::string& Version_Name(Version value) {
    return Claim_Version_Name(value);
  }
  static inline bool Version_Parse(const ::std::string& name,
      Version* value) {
    return Claim_Version_Parse(name, value);
  }

  typedef Claim_ClaimType ClaimType;
  static const ClaimType UNKNOWN_CLAIM_TYPE =
    Claim_ClaimType_UNKNOWN_CLAIM_TYPE;
  static const ClaimType streamType =
    Claim_ClaimType_streamType;
  static const ClaimType certificateType =
    Claim_ClaimType_certificateType;
  static inline bool ClaimType_IsValid(int value) {
    return Claim_ClaimType_IsValid(value);
  }
  static const ClaimType ClaimType_MIN =
    Claim_ClaimType_ClaimType_MIN;
  static const ClaimType ClaimType_MAX =
    Claim_ClaimType_ClaimType_MAX;
  static const int ClaimType_ARRAYSIZE =
    Claim_ClaimType_ClaimType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ClaimType_descriptor() {
    return Claim_ClaimType_descriptor();
  }
  static inline const ::std::string& ClaimType_Name(ClaimType value) {
    return Claim_ClaimType_Name(value);
  }
  static inline bool ClaimType_Parse(const ::std::string& name,
      ClaimType* value) {
    return Claim_ClaimType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .legacy_pb.Stream stream = 3;
  bool has_stream() const;
  void clear_stream();
  static const int kStreamFieldNumber = 3;
  const ::legacy_pb::Stream& stream() const;
  ::legacy_pb::Stream* release_stream();
  ::legacy_pb::Stream* mutable_stream();
  void set_allocated_stream(::legacy_pb::Stream* stream);

  // optional .legacy_pb.Certificate certificate = 4;
  bool has_certificate() const;
  void clear_certificate();
  static const int kCertificateFieldNumber = 4;
  const ::legacy_pb::Certificate& certificate() const;
  ::legacy_pb::Certificate* release_certificate();
  ::legacy_pb::Certificate* mutable_certificate();
  void set_allocated_certificate(::legacy_pb::Certificate* certificate);

  // optional .legacy_pb.Signature publisherSignature = 5;
  bool has_publishersignature() const;
  void clear_publishersignature();
  static const int kPublisherSignatureFieldNumber = 5;
  const ::legacy_pb::Signature& publishersignature() const;
  ::legacy_pb::Signature* release_publishersignature();
  ::legacy_pb::Signature* mutable_publishersignature();
  void set_allocated_publishersignature(::legacy_pb::Signature* publishersignature);

  // required .legacy_pb.Claim.Version version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::legacy_pb::Claim_Version version() const;
  void set_version(::legacy_pb::Claim_Version value);

  // required .legacy_pb.Claim.ClaimType claimType = 2;
  bool has_claimtype() const;
  void clear_claimtype();
  static const int kClaimTypeFieldNumber = 2;
  ::legacy_pb::Claim_ClaimType claimtype() const;
  void set_claimtype(::legacy_pb::Claim_ClaimType value);

  // @@protoc_insertion_point(class_scope:legacy_pb.Claim)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::legacy_pb::Stream* stream_;
  ::legacy_pb::Certificate* certificate_;
  ::legacy_pb::Signature* publishersignature_;
  int version_;
  int claimtype_;
  friend struct ::TableStruct_legacy_5fclaim_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Claim

// required .legacy_pb.Claim.Version version = 1;
inline bool Claim::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Claim::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::legacy_pb::Claim_Version Claim::version() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Claim.version)
  return static_cast< ::legacy_pb::Claim_Version >(version_);
}
inline void Claim::set_version(::legacy_pb::Claim_Version value) {
  assert(::legacy_pb::Claim_Version_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  version_ = value;
  // @@protoc_insertion_point(field_set:legacy_pb.Claim.version)
}

// required .legacy_pb.Claim.ClaimType claimType = 2;
inline bool Claim::has_claimtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Claim::clear_claimtype() {
  claimtype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::legacy_pb::Claim_ClaimType Claim::claimtype() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Claim.claimType)
  return static_cast< ::legacy_pb::Claim_ClaimType >(claimtype_);
}
inline void Claim::set_claimtype(::legacy_pb::Claim_ClaimType value) {
  assert(::legacy_pb::Claim_ClaimType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  claimtype_ = value;
  // @@protoc_insertion_point(field_set:legacy_pb.Claim.claimType)
}

// optional .legacy_pb.Stream stream = 3;
inline bool Claim::has_stream() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::legacy_pb::Stream& Claim::stream() const {
  const ::legacy_pb::Stream* p = stream_;
  // @@protoc_insertion_point(field_get:legacy_pb.Claim.stream)
  return p != nullptr ? *p : *reinterpret_cast<const ::legacy_pb::Stream*>(
      &::legacy_pb::_Stream_default_instance_);
}
inline ::legacy_pb::Stream* Claim::release_stream() {
  // @@protoc_insertion_point(field_release:legacy_pb.Claim.stream)
  _has_bits_[0] &= ~0x00000001u;
  ::legacy_pb::Stream* temp = stream_;
  stream_ = nullptr;
  return temp;
}
inline ::legacy_pb::Stream* Claim::mutable_stream() {
  _has_bits_[0] |= 0x00000001u;
  if (stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::legacy_pb::Stream>(GetArenaNoVirtual());
    stream_ = p;
  }
  // @@protoc_insertion_point(field_mutable:legacy_pb.Claim.stream)
  return stream_;
}
inline void Claim::set_allocated_stream(::legacy_pb::Stream* stream) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stream_);
  }
  if (stream) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stream = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Claim.stream)
}

// optional .legacy_pb.Certificate certificate = 4;
inline bool Claim::has_certificate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::legacy_pb::Certificate& Claim::certificate() const {
  const ::legacy_pb::Certificate* p = certificate_;
  // @@protoc_insertion_point(field_get:legacy_pb.Claim.certificate)
  return p != nullptr ? *p : *reinterpret_cast<const ::legacy_pb::Certificate*>(
      &::legacy_pb::_Certificate_default_instance_);
}
inline ::legacy_pb::Certificate* Claim::release_certificate() {
  // @@protoc_insertion_point(field_release:legacy_pb.Claim.certificate)
  _has_bits_[0] &= ~0x00000002u;
  ::legacy_pb::Certificate* temp = certificate_;
  certificate_ = nullptr;
  return temp;
}
inline ::legacy_pb::Certificate* Claim::mutable_certificate() {
  _has_bits_[0] |= 0x00000002u;
  if (certificate_ == nullptr) {
    auto* p = CreateMaybeMessage<::legacy_pb::Certificate>(GetArenaNoVirtual());
    certificate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:legacy_pb.Claim.certificate)
  return certificate_;
}
inline void Claim::set_allocated_certificate(::legacy_pb::Certificate* certificate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(certificate_);
  }
  if (certificate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      certificate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, certificate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  certificate_ = certificate;
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Claim.certificate)
}

// optional .legacy_pb.Signature publisherSignature = 5;
inline bool Claim::has_publishersignature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::legacy_pb::Signature& Claim::publishersignature() const {
  const ::legacy_pb::Signature* p = publishersignature_;
  // @@protoc_insertion_point(field_get:legacy_pb.Claim.publisherSignature)
  return p != nullptr ? *p : *reinterpret_cast<const ::legacy_pb::Signature*>(
      &::legacy_pb::_Signature_default_instance_);
}
inline ::legacy_pb::Signature* Claim::release_publishersignature() {
  // @@protoc_insertion_point(field_release:legacy_pb.Claim.publisherSignature)
  _has_bits_[0] &= ~0x00000004u;
  ::legacy_pb::Signature* temp = publishersignature_;
  publishersignature_ = nullptr;
  return temp;
}
inline ::legacy_pb::Signature* Claim::mutable_publishersignature() {
  _has_bits_[0] |= 0x00000004u;
  if (publishersignature_ == nullptr) {
    auto* p = CreateMaybeMessage<::legacy_pb::Signature>(GetArenaNoVirtual());
    publishersignature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:legacy_pb.Claim.publisherSignature)
  return publishersignature_;
}
inline void Claim::set_allocated_publishersignature(::legacy_pb::Signature* publishersignature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(publishersignature_);
  }
  if (publishersignature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      publishersignature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, publishersignature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  publishersignature_ = publishersignature;
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Claim.publisherSignature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace legacy_pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::legacy_pb::Claim_Version> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::legacy_pb::Claim_Version>() {
  return ::legacy_pb::Claim_Version_descriptor();
}
template <> struct is_proto_enum< ::legacy_pb::Claim_ClaimType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::legacy_pb::Claim_ClaimType>() {
  return ::legacy_pb::Claim_ClaimType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_legacy_5fclaim_2eproto
