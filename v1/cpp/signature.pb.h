// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signature.proto

#ifndef PROTOBUF_INCLUDED_signature_2eproto
#define PROTOBUF_INCLUDED_signature_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "certificate.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_signature_2eproto 

namespace protobuf_signature_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_signature_2eproto
namespace pb {
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::Signature* Arena::CreateMaybeMessage<::pb::Signature>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

enum Signature_Version {
  Signature_Version_UNKNOWN_VERSION = 0,
  Signature_Version__0_0_1 = 1
};
bool Signature_Version_IsValid(int value);
const Signature_Version Signature_Version_Version_MIN = Signature_Version_UNKNOWN_VERSION;
const Signature_Version Signature_Version_Version_MAX = Signature_Version__0_0_1;
const int Signature_Version_Version_ARRAYSIZE = Signature_Version_Version_MAX + 1;

const ::google::protobuf::EnumDescriptor* Signature_Version_descriptor();
inline const ::std::string& Signature_Version_Name(Signature_Version value) {
  return ::google::protobuf::internal::NameOfEnum(
    Signature_Version_descriptor(), value);
}
inline bool Signature_Version_Parse(
    const ::std::string& name, Signature_Version* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Signature_Version>(
    Signature_Version_descriptor(), name, value);
}
// ===================================================================

class Signature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Signature) */ {
 public:
  Signature();
  virtual ~Signature();

  Signature(const Signature& from);

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(Signature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Signature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Signature* other);
  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Signature* New() const final {
    return CreateMaybeMessage<Signature>(NULL);
  }

  Signature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Signature_Version Version;
  static const Version UNKNOWN_VERSION =
    Signature_Version_UNKNOWN_VERSION;
  static const Version _0_0_1 =
    Signature_Version__0_0_1;
  static inline bool Version_IsValid(int value) {
    return Signature_Version_IsValid(value);
  }
  static const Version Version_MIN =
    Signature_Version_Version_MIN;
  static const Version Version_MAX =
    Signature_Version_Version_MAX;
  static const int Version_ARRAYSIZE =
    Signature_Version_Version_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Version_descriptor() {
    return Signature_Version_descriptor();
  }
  static inline const ::std::string& Version_Name(Version value) {
    return Signature_Version_Name(value);
  }
  static inline bool Version_Parse(const ::std::string& name,
      Version* value) {
    return Signature_Version_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // required bytes certificateId = 4;
  bool has_certificateid() const;
  void clear_certificateid();
  static const int kCertificateIdFieldNumber = 4;
  const ::std::string& certificateid() const;
  void set_certificateid(const ::std::string& value);
  #if LANG_CXX11
  void set_certificateid(::std::string&& value);
  #endif
  void set_certificateid(const char* value);
  void set_certificateid(const void* value, size_t size);
  ::std::string* mutable_certificateid();
  ::std::string* release_certificateid();
  void set_allocated_certificateid(::std::string* certificateid);

  // required .pb.Signature.Version version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::pb::Signature_Version version() const;
  void set_version(::pb::Signature_Version value);

  // required .pb.KeyType signatureType = 2;
  bool has_signaturetype() const;
  void clear_signaturetype();
  static const int kSignatureTypeFieldNumber = 2;
  ::pb::KeyType signaturetype() const;
  void set_signaturetype(::pb::KeyType value);

  // @@protoc_insertion_point(class_scope:pb.Signature)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_signaturetype();
  void clear_has_signaturetype();
  void set_has_signature();
  void clear_has_signature();
  void set_has_certificateid();
  void clear_has_certificateid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr certificateid_;
  int version_;
  int signaturetype_;
  friend struct ::protobuf_signature_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Signature

// required .pb.Signature.Version version = 1;
inline bool Signature::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Signature::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Signature::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Signature::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::pb::Signature_Version Signature::version() const {
  // @@protoc_insertion_point(field_get:pb.Signature.version)
  return static_cast< ::pb::Signature_Version >(version_);
}
inline void Signature::set_version(::pb::Signature_Version value) {
  assert(::pb::Signature_Version_IsValid(value));
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.Signature.version)
}

// required .pb.KeyType signatureType = 2;
inline bool Signature::has_signaturetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Signature::set_has_signaturetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Signature::clear_has_signaturetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Signature::clear_signaturetype() {
  signaturetype_ = 0;
  clear_has_signaturetype();
}
inline ::pb::KeyType Signature::signaturetype() const {
  // @@protoc_insertion_point(field_get:pb.Signature.signatureType)
  return static_cast< ::pb::KeyType >(signaturetype_);
}
inline void Signature::set_signaturetype(::pb::KeyType value) {
  assert(::pb::KeyType_IsValid(value));
  set_has_signaturetype();
  signaturetype_ = value;
  // @@protoc_insertion_point(field_set:pb.Signature.signatureType)
}

// required bytes signature = 3;
inline bool Signature::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Signature::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Signature::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Signature::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& Signature::signature() const {
  // @@protoc_insertion_point(field_get:pb.Signature.signature)
  return signature_.GetNoArena();
}
inline void Signature::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Signature.signature)
}
#if LANG_CXX11
inline void Signature::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Signature.signature)
}
#endif
inline void Signature::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Signature.signature)
}
inline void Signature::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Signature.signature)
}
inline ::std::string* Signature::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:pb.Signature.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Signature::release_signature() {
  // @@protoc_insertion_point(field_release:pb.Signature.signature)
  if (!has_signature()) {
    return NULL;
  }
  clear_has_signature();
  return signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Signature::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:pb.Signature.signature)
}

// required bytes certificateId = 4;
inline bool Signature::has_certificateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Signature::set_has_certificateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Signature::clear_has_certificateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Signature::clear_certificateid() {
  certificateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_certificateid();
}
inline const ::std::string& Signature::certificateid() const {
  // @@protoc_insertion_point(field_get:pb.Signature.certificateId)
  return certificateid_.GetNoArena();
}
inline void Signature::set_certificateid(const ::std::string& value) {
  set_has_certificateid();
  certificateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Signature.certificateId)
}
#if LANG_CXX11
inline void Signature::set_certificateid(::std::string&& value) {
  set_has_certificateid();
  certificateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Signature.certificateId)
}
#endif
inline void Signature::set_certificateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_certificateid();
  certificateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Signature.certificateId)
}
inline void Signature::set_certificateid(const void* value, size_t size) {
  set_has_certificateid();
  certificateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Signature.certificateId)
}
inline ::std::string* Signature::mutable_certificateid() {
  set_has_certificateid();
  // @@protoc_insertion_point(field_mutable:pb.Signature.certificateId)
  return certificateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Signature::release_certificateid() {
  // @@protoc_insertion_point(field_release:pb.Signature.certificateId)
  if (!has_certificateid()) {
    return NULL;
  }
  clear_has_certificateid();
  return certificateid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Signature::set_allocated_certificateid(::std::string* certificateid) {
  if (certificateid != NULL) {
    set_has_certificateid();
  } else {
    clear_has_certificateid();
  }
  certificateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certificateid);
  // @@protoc_insertion_point(field_set_allocated:pb.Signature.certificateId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::Signature_Version> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Signature_Version>() {
  return ::pb::Signature_Version_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_signature_2eproto
