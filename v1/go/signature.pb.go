// Code generated by protoc-gen-go. DO NOT EDIT.
// source: signature.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Signature_Version int32

const (
	Signature_UNKNOWN_VERSION Signature_Version = 0
	Signature__0_0_1          Signature_Version = 1
)

var Signature_Version_name = map[int32]string{
	0: "UNKNOWN_VERSION",
	1: "_0_0_1",
}
var Signature_Version_value = map[string]int32{
	"UNKNOWN_VERSION": 0,
	"_0_0_1":          1,
}

func (x Signature_Version) Enum() *Signature_Version {
	p := new(Signature_Version)
	*p = x
	return p
}
func (x Signature_Version) String() string {
	return proto.EnumName(Signature_Version_name, int32(x))
}
func (x *Signature_Version) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Signature_Version_value, data, "Signature_Version")
	if err != nil {
		return err
	}
	*x = Signature_Version(value)
	return nil
}
func (Signature_Version) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0, 0} }

type Signature struct {
	Version          *Signature_Version `protobuf:"varint,1,req,name=version,enum=pb.Signature_Version" json:"version,omitempty"`
	SignatureType    *KeyType           `protobuf:"varint,2,req,name=signatureType,enum=pb.KeyType" json:"signatureType,omitempty"`
	Signature        []byte             `protobuf:"bytes,3,req,name=signature" json:"signature,omitempty"`
	CertificateId    []byte             `protobuf:"bytes,4,req,name=certificateId" json:"certificateId,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Signature) GetVersion() Signature_Version {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Signature_UNKNOWN_VERSION
}

func (m *Signature) GetSignatureType() KeyType {
	if m != nil && m.SignatureType != nil {
		return *m.SignatureType
	}
	return KeyType_UNKNOWN_PUBLIC_KEY_TYPE
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Signature) GetCertificateId() []byte {
	if m != nil {
		return m.CertificateId
	}
	return nil
}

func init() {
	proto.RegisterType((*Signature)(nil), "pb.Signature")
	proto.RegisterEnum("pb.Signature_Version", Signature_Version_name, Signature_Version_value)
}

func init() { proto.RegisterFile("signature.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0xce, 0x4c, 0xcf,
	0x4b, 0x2c, 0x29, 0x2d, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92,
	0x12, 0x4c, 0x4e, 0x2d, 0x2a, 0xc9, 0x4c, 0xcb, 0x4c, 0x4e, 0x2c, 0x81, 0x0a, 0x2b, 0xdd, 0x67,
	0xe4, 0xe2, 0x0c, 0x86, 0x29, 0x15, 0xd2, 0xe7, 0x62, 0x2f, 0x4b, 0x2d, 0x2a, 0xce, 0xcc, 0xcf,
	0x93, 0x60, 0x54, 0x60, 0xd2, 0xe0, 0x33, 0x12, 0xd5, 0x2b, 0x48, 0xd2, 0x83, 0xcb, 0xeb, 0x85,
	0x41, 0x24, 0x83, 0x60, 0xaa, 0x84, 0x0c, 0xb9, 0x78, 0xe1, 0x16, 0x85, 0x54, 0x16, 0xa4, 0x4a,
	0x30, 0x81, 0xb5, 0x71, 0x83, 0xb4, 0x79, 0xa7, 0x56, 0x82, 0x84, 0x82, 0x50, 0x55, 0x08, 0xc9,
	0x70, 0x71, 0xc2, 0x05, 0x24, 0x98, 0x15, 0x98, 0x34, 0x78, 0x82, 0x10, 0x02, 0x42, 0x2a, 0x5c,
	0xbc, 0x48, 0x8e, 0xf4, 0x4c, 0x91, 0x60, 0x01, 0xab, 0x40, 0x15, 0x54, 0xd2, 0xe2, 0x62, 0x87,
	0x3a, 0x45, 0x48, 0x98, 0x8b, 0x3f, 0xd4, 0xcf, 0xdb, 0xcf, 0x3f, 0xdc, 0x2f, 0x3e, 0xcc, 0x35,
	0x28, 0xd8, 0xd3, 0xdf, 0x4f, 0x80, 0x41, 0x88, 0x8b, 0x8b, 0x2d, 0xde, 0x20, 0xde, 0x20, 0xde,
	0x50, 0x80, 0x11, 0x10, 0x00, 0x00, 0xff, 0xff, 0x50, 0x35, 0x0d, 0x49, 0x0a, 0x01, 0x00, 0x00,
}
