// Code generated by protoc-gen-go. DO NOT EDIT.
// source: source.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Source_Version int32

const (
	Source_UNKNOWN_VERSION Source_Version = 0
	Source__0_0_1          Source_Version = 1
)

var Source_Version_name = map[int32]string{
	0: "UNKNOWN_VERSION",
	1: "_0_0_1",
}
var Source_Version_value = map[string]int32{
	"UNKNOWN_VERSION": 0,
	"_0_0_1":          1,
}

func (x Source_Version) Enum() *Source_Version {
	p := new(Source_Version)
	*p = x
	return p
}
func (x Source_Version) String() string {
	return proto.EnumName(Source_Version_name, int32(x))
}
func (x *Source_Version) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Source_Version_value, data, "Source_Version")
	if err != nil {
		return err
	}
	*x = Source_Version(value)
	return nil
}
func (Source_Version) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 0} }

type Source_SourceTypes int32

const (
	Source_UNKNOWN_SOURCE_TYPE Source_SourceTypes = 0
	Source_lbry_sd_hash        Source_SourceTypes = 1
)

var Source_SourceTypes_name = map[int32]string{
	0: "UNKNOWN_SOURCE_TYPE",
	1: "lbry_sd_hash",
}
var Source_SourceTypes_value = map[string]int32{
	"UNKNOWN_SOURCE_TYPE": 0,
	"lbry_sd_hash":        1,
}

func (x Source_SourceTypes) Enum() *Source_SourceTypes {
	p := new(Source_SourceTypes)
	*p = x
	return p
}
func (x Source_SourceTypes) String() string {
	return proto.EnumName(Source_SourceTypes_name, int32(x))
}
func (x *Source_SourceTypes) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Source_SourceTypes_value, data, "Source_SourceTypes")
	if err != nil {
		return err
	}
	*x = Source_SourceTypes(value)
	return nil
}
func (Source_SourceTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 1} }

type Source struct {
	Version          *Source_Version     `protobuf:"varint,1,req,name=version,enum=pb.Source_Version" json:"version,omitempty"`
	SourceType       *Source_SourceTypes `protobuf:"varint,2,req,name=sourceType,enum=pb.Source_SourceTypes" json:"sourceType,omitempty"`
	Source           []byte              `protobuf:"bytes,3,req,name=source" json:"source,omitempty"`
	ContentType      *string             `protobuf:"bytes,4,req,name=contentType" json:"contentType,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Source) GetVersion() Source_Version {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Source_UNKNOWN_VERSION
}

func (m *Source) GetSourceType() Source_SourceTypes {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return Source_UNKNOWN_SOURCE_TYPE
}

func (m *Source) GetSource() []byte {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Source) GetContentType() string {
	if m != nil && m.ContentType != nil {
		return *m.ContentType
	}
	return ""
}

func init() {
	proto.RegisterType((*Source)(nil), "pb.Source")
	proto.RegisterEnum("pb.Source_Version", Source_Version_name, Source_Version_value)
	proto.RegisterEnum("pb.Source_SourceTypes", Source_SourceTypes_name, Source_SourceTypes_value)
}

func init() { proto.RegisterFile("source.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xce, 0x2f, 0x2d,
	0x4a, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xea, 0x63, 0xe2,
	0x62, 0x0b, 0x06, 0x0b, 0x0a, 0xe9, 0x70, 0xb1, 0x97, 0xa5, 0x16, 0x15, 0x67, 0xe6, 0xe7, 0x49,
	0x30, 0x2a, 0x30, 0x69, 0xf0, 0x19, 0x09, 0xe9, 0x15, 0x24, 0xe9, 0x41, 0x24, 0xf5, 0xc2, 0x20,
	0x32, 0x41, 0x30, 0x25, 0x42, 0x66, 0x5c, 0x5c, 0x10, 0xc3, 0x42, 0x2a, 0x0b, 0x52, 0x25, 0x98,
	0xc0, 0x1a, 0xc4, 0x90, 0x34, 0x04, 0xc3, 0x25, 0x8b, 0x83, 0x90, 0x54, 0x0a, 0x89, 0x71, 0xb1,
	0x41, 0x78, 0x12, 0xcc, 0x0a, 0x4c, 0x1a, 0x3c, 0x41, 0x50, 0x9e, 0x90, 0x02, 0x17, 0x77, 0x72,
	0x7e, 0x5e, 0x49, 0x6a, 0x5e, 0x09, 0xd8, 0x40, 0x16, 0x05, 0x26, 0x0d, 0xce, 0x20, 0x64, 0x21,
	0x25, 0x2d, 0x2e, 0x76, 0xa8, 0x2b, 0x84, 0x84, 0xb9, 0xf8, 0x43, 0xfd, 0xbc, 0xfd, 0xfc, 0xc3,
	0xfd, 0xe2, 0xc3, 0x5c, 0x83, 0x82, 0x3d, 0xfd, 0xfd, 0x04, 0x18, 0x84, 0xb8, 0xb8, 0xd8, 0xe2,
	0x0d, 0xe2, 0x0d, 0xe2, 0x0d, 0x05, 0x18, 0x95, 0x2c, 0xb8, 0xb8, 0x91, 0x1c, 0x20, 0x24, 0xce,
	0x25, 0x0c, 0x53, 0x1f, 0xec, 0x1f, 0x1a, 0xe4, 0xec, 0x1a, 0x1f, 0x12, 0x19, 0xe0, 0x2a, 0xc0,
	0x20, 0x24, 0xc0, 0xc5, 0x93, 0x93, 0x54, 0x54, 0x19, 0x5f, 0x9c, 0x12, 0x9f, 0x91, 0x58, 0x9c,
	0x21, 0xc0, 0x08, 0x08, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x07, 0x54, 0x9d, 0x23, 0x01, 0x00, 0x00,
}
